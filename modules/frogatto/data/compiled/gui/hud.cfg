{
	"animation": [
		{
			"duration": 6,
			"frame_info": [0,0,0,0,283,934,20,20],
			"frames": 1,
			"id": "frogatto_portrait",
			"image": "compiled-2.png",
			"rect": [283,934,302,953]
		},
		{
			"duration": 6,
			"frame_info": [0,0,0,0,371,934,20,20],
			"frames": 1,
			"id": "frogatto_energyshot_portrait",
			"image": "compiled-2.png",
			"rect": [371,934,390,953]
		},
		{
			"duration": 6,
			"frame_info": [0,0,0,0,391,934,20,20],
			"frames": 1,
			"id": "frogatto_firebreath_portrait",
			"image": "compiled-2.png",
			"rect": [391,934,410,953]
		},
		{
			"duration": 6,
			"frame_info": [0,0,0,0,411,934,20,20],
			"frames": 1,
			"id": "frogatto_tongue_portrait",
			"image": "compiled-2.png",
			"rect": [411,934,430,953]
		},
		{
			"duration": 6,
			"frame_info": [0,0,0,0,431,934,20,20],
			"frames": 1,
			"id": "frogatto_homingshot_portrait",
			"image": "compiled-2.png",
			"rect": [431,934,450,953]
		},
		{
			"duration": 6,
			"frame_info": [0,0,0,0,1003,95,20,20],
			"frames": 1,
			"id": "nene_portrait",
			"image": "compiled-0.png",
			"rect": [1003,95,1022,114]
		},
		{
			"duration": 6,
			"frame_info": [0,0,0,0,451,934,20,20],
			"frames": 1,
			"id": "nene_flamethrower_portrait",
			"image": "compiled-2.png",
			"rect": [451,934,470,953]
		},
		{
			"duration": 6,
			"frame_info": [0,0,0,0,471,934,20,20],
			"frames": 1,
			"id": "pato_portrait",
			"image": "compiled-2.png",
			"rect": [471,934,490,953]
		},
		{
			"duration": 6,
			"frame_info": [0,0,0,0,529,934,20,20],
			"frames": 1,
			"id": "pato_glove_portrait",
			"image": "compiled-2.png",
			"rect": [529,934,548,953]
		},
		{
			"duration": 100,
			"frame_info": [0,0,0,0,894,133,58,11],
			"frames": 1,
			"id": "gold_background",
			"image": "compiled-1.png",
			"rect": [894,133,951,143]
		},
		{
			"duration": 100,
			"frame_info": [0,1,0,1,1013,603,11,10],
			"frames": 1,
			"id": "small_heart_full",
			"image": "compiled-2.png",
			"rect": [1013,602,1023,613]
		},
		{
			"duration": 100,
			"frame_info": [1,2,1,2,996,913,9,8],
			"frames": 1,
			"id": "small_heart_empty",
			"image": "compiled-0.png",
			"rect": [995,911,1005,922]
		},
		{
			"duration": 100,
			"frame_info": [0,0,0,7,1002,207,15,14],
			"frames": 1,
			"id": "heart_full",
			"image": "compiled-0.png",
			"rect": [1002,207,1016,227]
		},
		{
			"duration": 100,
			"frame_info": [0,0,0,7,1002,221,15,14],
			"frames": 1,
			"id": "heart_half",
			"image": "compiled-0.png",
			"rect": [1002,221,1016,241]
		},
		{
			"duration": 100,
			"frame_info": [0,0,0,7,973,161,15,14],
			"frames": 1,
			"id": "heart_empty",
			"image": "compiled-0.png",
			"rect": [973,161,987,181]
		},
		{
			"frame_info": [40,12,0,0,1023,78,0,0],
			"id": "bar_frame",
			"image": "compiled-0.png",
			"rect": [983,66,1022,77]
		},
		{
			"frame_info": [0,0,1,1,1012,544,11,7],
			"id": "bar_element",
			"image": "compiled-1.png",
			"rect": [1012,544,1023,551]
		},
		{
			"id": "charge_bar_center",
			"image": "gui/progress-bar-center.png",
			"rect": [0,0,7,7]
		},
		{
			"id": "charge_bar_left",
			"image": "gui/progress-bar-endcaps.png",
			"rect": [3,0,7,6]
		},
		{
			"id": "charge_bar_right",
			"image": "gui/progress-bar-endcaps.png",
			"rect": [0,8,4,14]
		},
		{
			"id": "charge_bar_well_center",
			"image": "gui/progress-bar-well-center.png",
			"rect": [0,0,15,11]
		},
		{
			"frame_info": [0,0,0,1,878,133,16,11],
			"id": "charge_bar_well_left",
			"image": "compiled-1.png",
			"rect": [878,133,893,144]
		},
		{
			"frame_info": [0,0,0,1,999,343,16,11],
			"id": "charge_bar_well_right",
			"image": "compiled-0.png",
			"rect": [999,343,1014,354]
		},
		{
			"frame_info": [0,0,0,0,614,117,123,9],
			"id": "manabar_empty",
			"image": "compiled-0.png",
			"rect": [614,117,736,125]
		},
		{
			"frame_info": [0,0,0,1,642,766,26,25],
			"id": "boss_angryface_heart_icon",
			"image": "compiled-2.png",
			"rect": [642,766,667,791]
		}
	],
	"includes": "score",
	"no_compile_image": "gui/progress-bar-center.png,gui/progress-bar-endcaps.png,gui/progress-bar-well-center.png",
	"on_draw": "if(level.local_player.type = 'invisible_observer',  /*then draw absolutely nothing */	null,
		[
		draw_animation('gold_background', 178, 10),
		draw_number(object.vars.coins, 5, 202, 14),

	if(level.local_player.type = 'frogatto_playable',
	
		switch(level.local_player.vars.ability_list[level.local_player.vars.current_ability],
			 'tongue', 			draw_animation('frogatto_tongue_portrait', 10, 10),
			 'firebreath', 		draw_animation('frogatto_firebreath_portrait', 10, 10),
			 'energyshot',		draw_animation('frogatto_energyshot_portrait', 10, 10),
			 'homingshot',		draw_animation('frogatto_homingshot_portrait', 10, 10),
								draw_animation('frogatto_portrait', 10, 10))),

	draw_animation('manabar_empty', 48, 32),
	
	[if(level.local_player.vars.mana > 0,
	 	[	draw_animation('charge_bar_left', x_offset, y_offset),
			draw_animation('charge_bar_right', x_offset + barLength*2, y_offset),
			if(barLength > 5, draw_animation_area('charge_bar_center', x_offset+10, y_offset, barLength-5))

		   ] where x_offset = 52 where y_offset = 32 where barLength = integer((fullBarLength * level.local_player.vars.mana)/level.local_player.vars.max_mana) )
	 ] where fullBarLength = 114,
	


# Display rows of hearts.#
	[map(range( ceiling(max_HP/decimal(hearts_per_row * hp_per_heart))), 'row_index',
    slice(
    map(range(hearts_per_row), 'index', draw_animation('heart_full', x_offset+x_width*index, y_offset+y_height*row_index)),
    	0, max(0, min(hearts_per_row, (cur_HP)/hp_per_heart - hearts_per_row*row_index)    ))),

	map(range( ceiling(max_HP/decimal(hearts_per_row * hp_per_heart))), 'row_index',
    slice(
    map(range(hearts_per_row), 'index', draw_animation('heart_empty', x_offset+x_width*index, y_offset+y_height*row_index)),
    	max(0,min(hearts_per_row, (cur_HP)/hp_per_heart - hearts_per_row*row_index)), min(hearts_per_row, ceiling((max_HP)/decimal(hp_per_heart)) - hearts_per_row*row_index) )),
    	
    if(cur_HP > 0 and cur_HP%hp_per_heart,
    map(range(hearts_per_row), 'index', draw_animation('heart_half', x_offset+x_width*index, y_offset+y_height*row_index)) [cur_HP/hp_per_heart - row_index*(hearts_per_row)])
    where row_index = cur_HP/(hearts_per_row * hp_per_heart)

	] where x_offset = 10 where y_offset = 52 where x_width = 32 where y_height = 32 where hp_per_heart = 2 where hearts_per_row = 10 where ceiling = def(val) (if(val <= integer(val), integer(val), integer(val)+1)) where max_HP = level.local_player.max_hitpoints where cur_HP = level.local_player.hitpoints,
	
	
	

	if(level.local_player.consts.tank_size, [draw_animation('bar_frame', 10, 50),
	map(range(max(0, (level.local_player.vars.tank_fuel*4)/level.local_player.consts.tank_size)), 'n', draw_animation('bar_element', 14 + n*20, 54))]),

	if(energy_charge > 0,
		if(energy_charge < 20,
		   [draw_animation_area('charge_bar_left', 14, 52, energy_charge/4),
		    draw_animation_area('charge_bar_right', 12 + energy_charge/2, 52, 5 - energy_charge/4, 0, energy_charge/4, 5)],
		   [
		    draw_animation('charge_bar_left', 14, 52),
		    draw_animation('charge_bar_right', 14 + energy_charge - 12, 52),
	        draw_animation_area('charge_bar_center', 14 + 10, 52, (energy_charge - 20)/2)
		   ]
	    )
	 )
     where energy_charge = if(level.local_player.vars.charge_time = 0, 0, (level.local_player.energy_charge*75)/level.local_player.vars.charge_time - 5),

	
	if(object.vars.boss_hitpoints,
		 [draw_animation('charge_bar_well_left', well_start, SCREEN_HEIGHT - 44),
		 draw_animation_area('charge_bar_well_center', well_start + 16, SCREEN_HEIGHT - 44, well_size/2),
		 draw_animation('charge_bar_well_right', well_start + well_size - 16, SCREEN_HEIGHT - 44),
		 #draw_text('door_label','BOSS:', 40, SCREEN_HEIGHT - 40),#
		 draw_animation('boss_angryface_heart_icon', 20, SCREEN_HEIGHT - 56),
		 
		 
		 if(boss_hitpoints < 20,
		   [draw_animation_area('charge_bar_left', bar_start, SCREEN_HEIGHT - 40, boss_hitpoints/4),
		    draw_animation_area('charge_bar_right', bar_start + boss_hitpoints/2, SCREEN_HEIGHT - 40, 5 - boss_hitpoints/4, 0, boss_hitpoints/4, 5)],

		[draw_animation_area('charge_bar_center', bar_start + 10, SCREEN_HEIGHT - 40, (boss_hitpoints)/2),
		 draw_animation('charge_bar_left', bar_start, SCREEN_HEIGHT - 40),
		 draw_animation('charge_bar_right', bar_start + boss_hitpoints, SCREEN_HEIGHT - 40),
		 
		])]
	   
	   where boss_hitpoints = object.vars.boss_hitpoints*bar_size
	   	where bar_size = well_size - 2
	    where well_size = 640
		where bar_start = well_start + 4
	   	where well_start = 90
	 ),

	 if(object.vars.powerup_time > 20,
	   [draw_animation('charge_bar_left', 14, 90),
		draw_animation('charge_bar_right', 14 + object.vars.powerup_time - 11, 90),
	    draw_animation_area('charge_bar_center', 14 + 10, 90, (object.vars.powerup_time - 20)/2)
	   ]
	 )
	 
	])",
	"on_process": "[
	if(object.vars.coins != level.local_player.vars.coins*100, set(object.vars.coins, object.vars.coins + diff/20 + if(diff > 0, 1, -1)) where diff = level.local_player.vars.coins*100 - object.vars.coins),
	
	if(object.vars.coins = null, set(object.vars.coins, level.local_player.vars.coins*100)),

    if(object.vars.bosses or object.vars.boss_hitpoints,
	   [if(target_hitpoints <= 0, set(objects.vars.bosses, [])),
	    if(object.vars.boss_hitpoints != target_hitpoints,
			# make the bar fill up asymptotically (filling another half every cycle) so that it looks cool and smooth, but cap this once the divisions reach roughly 1 pixel in size, so it doesn't take infinite time.  This provides the looks cool benefits of gradually filling the bar, with an immediate sense of how far the current motion is going to reach (since humans are good at intuitively judging rates of change).#
			 set(object.vars.boss_hitpoints, 
			         if(   abs(target_hitpoints - object.vars.boss_hitpoints) < 0.001, target_hitpoints, object.vars.boss_hitpoints + (target_hitpoints - object.vars.boss_hitpoints)*0.15 )))
	    ] where target_hitpoints = if(object.vars.bosses, (sum(map(object.vars.bosses, if(value.boss_hitpoints != null, value.boss_hitpoints, value.hitpoints))))/decimal(sum(map(object.vars.bosses, if(value.boss_max_hitpoints != null, value.boss_max_hitpoints, value.max_hitpoints)))), 0)),
	
	if(object.vars.powerup_time != level.local_player.vars.powerup_time,
		    set(object.vars.powerup_time, object.vars.powerup_time + max(-2, min(10, level.local_player.vars.powerup_time - object.vars.powerup_time)))
	    ),
	]"
}