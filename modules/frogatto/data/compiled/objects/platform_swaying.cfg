{
	"animation": {
		"duration": 1000,
		"frames": 1,
		"h": 28,
		"id": "normal",
		"image": "effects/particles.png",
		"w": 28,
		"x": 210,
		"y": 166
	},
	"editor_info": {
		"category": "platforms",
		"help": "A moving platform rigged from ropes.",
		"var": [
			{
				"name": "speed",
				"value": 10
			},
			{
				"name": "move_x1",
				"type": "x",
				"value": "x + if(facing < 0, 9, 0)"
			},
			{
				"name": "move_x2",
				"type": "x",
				"value": "x + img_w - if(facing > 0, 9, 0)"
			},
			{
				"name": "move_y1",
				"type": "y",
				"value": "y + img_h - 34"
			},
			{
				"name": "move_y2",
				"type": "y",
				"value": "y + img_h"
			},
			{
				"name": "rope_height",
				"value": 128
			},
			{
				"name": "stopped",
				"type": "boolean",
				"value": 0
			},
			{
				"name": "dist",
				"type": "int",
				"value": 0
			},
			{
				"name": "is_zipline",
				"type": "boolean",
				"value": 0
			}
		]
	},
	"hidden_in_game": true,
	"id": "platform_swaying",
	"object_type": [
		{
			"animation": {
				"duration": 1000,
				"frames": 1,
				"id": "normal",
				"image": "props/rope-platform.png",
				"palettes": ["seaside_stormy","seaside_sunny","seaside_verdant","seaside_village","forest_autumn","forest_clean","forest_decay","forest_graveyard_shift","forest_verdant","cave_green","cave_brown","cave_deep","cave_pearl","cave_basaltic"],
				"rect": [81,1,93,13]
			},
			"id": "knot",
			"zorder": 2
		},
		{
			"animation": {
				"duration": 1000,
				"frames": 1,
				"id": "normal",
				"image": "props/rope-platform.png",
				"palettes": ["seaside_stormy","seaside_sunny","seaside_verdant","seaside_village","forest_autumn","forest_clean","forest_decay","forest_graveyard_shift","forest_verdant","cave_green","cave_brown","cave_deep","cave_pearl","cave_basaltic"],
				"rect": [65,1,77,13]
			},
			"id": "pulley",
			"zorder": 2
		},
		{
			"animation": {
				"duration": 1000,
				"frames": 1,
				"h": 28,
				"id": "normal",
				"image": "effects/particles.png",
				"w": 28,
				"x": 210,
				"y": 166
			},
			"id": "simple_platform_controller",
			"on_create": "[	
					set(alpha,0),
					set(x,parent.vars.knot.x),
					set(y,parent.vars.knot.y),
					set(vars.bwmag,8.0),
					
					[add_object(obj),
					set(vars.vert_rope, obj)
					] where obj = object('rope_angled_controller'),
					
					[add_object(obj),
					set(vars.basket, obj)
					] where obj = object('platform_swaying.shakebasket',x,y,facing,{'source'->me})
					
			]",
			"on_process": "[setPos(),setInertia(),decayBasketWobble(),testZipline()]",
			"properties": {
				"basketWobble": "sin(cycle*8)*vars.bwmag*0.55",
				"decayBasketWobble": "def() set(vars.bwmag, max(6.0,decimal(vars.bwmag)*(0.99/1)))",
				"not_in_zipline_bottomOut": "if(mod(parent.vars.dist-90,360) < 150 or mod(parent.vars.dist-90,360) > 210, 1, 0)",
				"not_in_zipline_topOut": "if(mod(parent.vars.dist-90,360) > 50 and mod(parent.vars.dist-90,360) < 300, 1, 0)",
				"parentSpeed": "(1.0 - parent.vars.stopped)",
				"player_is_standing_on_us": "if(level.player.standing_on = vars.basket,1,0)",
				"setInertia": "def() [
						schedule(2, 
						
						set(vars.inertia, 50*(sin(parent.vars.dist- if(parent.vars.is_zipline, -180, 180) *parent.polarity))))
			]",
				"setPos": "def() [
				vert_rope.set_ends(parent.vars.knot.midpoint_x, parent.vars.knot.midpoint_y, parent.vars.knot.midpoint_x + sway_x, parent.vars.knot.midpoint_y + parent.vars.rope_height),
				[
				set(vars.basket.midpoint_x, basketMidX),
				set(vars.basket.midpoint_y, basketMidY),
				//set(vars.basket.velocity_xy, list_single_multiply(list_subtract([basketMidX, basketMidY], vars.basket.midpoint_xy, ), 100)),
				//We can set either position or velocity, but we can't set both because it makes Frogatto glitch when he stands on the platform.
				set(vars.basket.rotate, parent.polarity * parentSpeed*(-vars.inertia/6.0 + basketWobble)),
				] where basketMidX = parent.vars.knot.midpoint_x+sway_x
				where basketMidY = parent.vars.knot.midpoint_y + parent.vars.rope_height,
	
			]",
				"sway_dampener": "max(1.0,abs(parent.point1[0] - parent.point2[0])/800.0)*min(1.0,parent.rope_height/128.0)",
				"sway_x": "sway_dampener* parent.polarity * parentSpeed/1.5 * ((100*sin(vars.inertia/2))+basketWobble/2)",
				"testZipline": "def() if(parent.vars.is_zipline,
				[if(player_is_standing_on_us, if(not_in_zipline_bottomOut, [if(mod(parent.vars.dist-90,360) > 180, set(parent.vars.dist,parent.vars.dist - 2*mod(parent.vars.dist-90,180) )),
				if(parent.stopped = 1.0, [parent.go ])], if(parent.stopped = 0.0,parent.stop))),
			
				if((not player_is_standing_on_us), if(not_in_zipline_topOut, if(parent.stopped = 1.0, parent.go), if(parent.stopped = 0.0, parent.stop)) )])",
				"tilt": 0
			},
			"zorder": 2
		},
		{
			"animation": {
				"duration": 1000,
				"frames": 1,
				"id": "normal",
				"image": "props/rope-platform.png",
				"no_remove_alpha_borders": true,
				"palettes": ["seaside_stormy","seaside_sunny","seaside_verdant","seaside_village","forest_autumn","forest_clean","forest_decay","forest_graveyard_shift","forest_verdant","cave_green","cave_brown","cave_deep","cave_pearl","cave_basaltic"],
				"rect": [0,0,63,63]
			},
			"id": "basket",
			"on_jumped_on": "if(level.player.standing_on = me, add(source.vars.bwmag, 10))",
			"platform_area": [16,56,47,57]
		},
		{
			"animation": [
				{
					"duration": 4,
					"frames": 11,
					"id": "normal",
					"image": "wip/basket-mockup2.png",
					"no_remove_alpha_borders": true,
					"palettes": ["seaside_stormy","seaside_sunny","seaside_verdant","seaside_village","forest_autumn","forest_clean","forest_decay","forest_graveyard_shift","forest_verdant","cave_green","cave_brown","cave_deep","cave_pearl","cave_basaltic"],
					"rect": [75,0,146,99],
					"reverse": true
				},
				{
					"duration": 4,
					"frames": 7,
					"id": "normal",
					"image": "wip/basket-mockup2.png",
					"no_remove_alpha_borders": true,
					"palettes": ["seaside_stormy","seaside_sunny","seaside_verdant","seaside_village","forest_autumn","forest_clean","forest_decay","forest_graveyard_shift","forest_verdant","cave_green","cave_brown","cave_deep","cave_pearl","cave_basaltic"],
					"rect": [219,0,290,99],
					"reverse": true
				}
			],
			"id": "shakebasket",
			"next_animation": "'normal'",
			"on_jumped_on": "if(level.player.standing_on = me, [add(source.vars.bwmag, 10),fire_event(source.parent,'tripped')])",
			"on_process": "[
					set(platform_area, [(rotated_rect[0] - x)/2, (rotated_rect[1] - y)/2,
			                    (rotated_rect[2] - x)/2]),
					set(platform_offsets, [0, (rotated_rect[3] - rotated_rect[1])]),
				]",
			"platform_area": [22,86,52,87],
			"properties": {
				"base_rect": "[x1pos, ypos,
			             x2pos, ypos,
			             x2pos, ypos,
			             x1pos, ypos]
						   where x1pos = platform_x1_pos,
						         x2pos = platform_x2_pos,
								 ypos = platform_y_pos",
				"platform_x1_pos": "midpoint_x - pwidth",
				"platform_x2_pos": "midpoint_x + pwidth",
				"platform_y_pos": "midpoint_y + 72",
				"pwidth": 40,
				"rotated_rect": "rotate_rect(midpoint_x, midpoint_y,
			                           rotate, base_rect)"
			},
			"zorder": -1
		}
	],
	"on_button_pressed": "go",
	"on_button_released": "stop",
	"on_create": "[
		set(activation_area, actArea),
		set(vars.move_x1, move_x1 - if(facing < 0, 9, 0)),
		set(vars.move_x2, move_x2 - if(facing > 0, 9, 0)),
		set(vars.move_y1, move_y1 - 34),
		set(vars.move_y2, move_y2),
		
		[add_object(obj),
		set(vars.knot, obj)
		] where obj = object('platform_swaying.knot',vars.move_x1,vars.move_y1,facing,{'activation_area'->actArea}),
		
		if(1, #here, we'd want to switch based on available types of platform, for now we'll just have one.#
			[add_object(obj),
			set(vars.the_platform, obj)
			] where obj = object('platform_swaying.simple_platform_controller',vars.move_x1,vars.move_y1,facing,{'parent'->me,'activation_area'->actArea})
		),

		[add_object(obj),
		set(vars.left_pulley, obj)
		] where obj = object('platform_swaying.pulley',vars.move_x1,vars.move_y1,facing,{'activation_area'->actArea}),

		[add_object(obj),
		set(vars.right_pulley, obj)
		] where obj = object('platform_swaying.pulley',vars.move_x1,vars.move_y1,facing,{'activation_area'->actArea}),
		
		[add_object(obj),
		set(vars.top_rope, obj)
		] where obj = object('rope_angled_controller',vars.move_x1,vars.move_y1,facing,{'activation_area'->actArea}),
		
		[add_object(obj),
		set(vars.left_rope, obj)
		] where obj = object('rope_angled_controller',vars.move_x1,vars.move_y1,facing,{'activation_area'->actArea}),
		
		[add_object(obj),
		set(vars.right_rope, obj)
		] where obj = object('rope_angled_controller',vars.move_x1,vars.move_y1,facing,{'activation_area'->actArea}),
		
		if(is_zipline, [set(vars.dist, 95), set(vars.stopped, 1)]),
		]",
	"on_done_create": "set(vars.actual_speed, vars.speed*50/distance(point1, point2))",
	"on_editor_changed_variable": "fire_event('done_create')",
	"on_load": "set(tmp.cache, create_cache())",
	"on_process": "[
		//debug_rect(actArea[0],actArea[1],actArea[2],actArea[3]),
		add(vars.dist, vars.actual_speed*(1-vars.stopped)),
		if(tmp.last_dist = null or vars.dist != tmp.last_dist,
		query_cache(tmp.cache, if(false, null, integer(vars.dist)%360), setPos(newPos)
		where newPos = list_add(list_tween(point1, point2, (sin(vars.dist)+1)/2), [0, 0])))
		]",
	"on_start_level": "set(activation_area, actArea)",
	"properties": {
		"actArea": "[point1[0] - 50 - actMargin, min(point1[1],point2[1]) - actMargin, point2[0]-point1[0] + 100 + actMargin*2, abs(point2[1]-point1[1]) + rope_height + 50 + actMargin*2]",
		"actBsize": "max(abs(vars.move_x1-vars.move_x2),abs(vars.move_y1-vars.move_y2))*2",
		"actMargin": "100",
		"go": "map(range(steps+1), 'step', schedule(step, set(vars.stopped,   (steps-step)/decimal(steps)))) where steps = 100",
		"point1": "[vars.move_x1, vars.move_y1]",
		"point2": "[vars.move_x2, vars.move_y2]",
		"polarity": "sign(vars.move_x2-vars.move_x1)",
		"pos": "[vars.knot.midpoint_x, vars.knot.midpoint_y]",
		"pulleyDiameter": 18,
		"sagOffset": 15,
		"setPos": "def(to) [
			set(vars.knot.midpoint_x, to[0]), 
			set(vars.knot.midpoint_y, to[1]),
			set(left_pulley.midpoint_x, point1[0]),
			set(left_pulley.midpoint_y, point1[1]-sagOffset -pulleyDiameter/2),
			set(left_pulley.rotate, polarity*(sin(vars.dist)+1)/2*180*15),
			set(right_pulley.midpoint_x, point2[0]),
			set(right_pulley.midpoint_y, point2[1]-sagOffset -pulleyDiameter/2),
			set(right_pulley.rotate, polarity*(sin(vars.dist)+1)/2*180*15),
			
			
			top_rope.set_ends_and_offset(point1[0], point1[1]-topRopeH, point2[0], point2[1]-topRopeH, length(point1[0], point1[1],to[0],to[1])/2),
			left_rope.set_ends_and_offset(to[0], to[1], point1[0], point1[1]-sagOffset, 0),
			right_rope.set_ends_and_offset(to[0], to[1], point2[0], point2[1]-sagOffset, 0),
			]",
		"stop": "map(range(steps+1), 'step', schedule(step, set(vars.stopped, 1-(steps-step)/decimal(steps)))) where steps = 100",
		"topRopeH": "pulleyDiameter+sagOffset"
	},
	"tmp": {
		"cache": null,
		"last_dist": null
	},
	"vars": {
		"actual_speed": 0,
		"children": [],
		"dist": null,
		"is_zipline": null,
		"move_x1": null,
		"move_x2": null,
		"move_y1": null,
		"move_y2": null,
		"rope_height": null,
		"speed": null,
		"stopped": null
	}
}