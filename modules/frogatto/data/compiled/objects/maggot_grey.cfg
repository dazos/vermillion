{
	"animation": [
		{
			"accel_x": 0,
			"accel_y": 0,
			"attack_area": [0,18,27,26],
			"body_area": ["solid","all"],
			"duration": 10,
			"frame_info": [6,1,7,19,494,95,15,8,5,1,6,13,509,95,17,14,5,1,6,5,526,95,17,22],
			"frames": 3,
			"frames_per_row": 3,
			"id": "emerge",
			"image": "compiled-0.png",
			"rect": [488,94,515,121],
			"rotate_on_slope": true,
			"solid_area": [2,30,25,44]
		},
		{
			"accel_x": 0,
			"accel_y": 0,
			"attack_area": [0,18,27,26],
			"body_area": ["solid","all"],
			"duration": 6,
			"frame_info": [6,0,7,1,971,575,15,27,5,0,6,2,986,575,17,26,5,0,6,0,1003,575,17,28],
			"frames": 3,
			"frames_per_row": 3,
			"id": "wiggle",
			"image": "compiled-2.png",
			"rect": [965,575,992,602],
			"reverse": true,
			"rotate_on_slope": true,
			"solid_area": [2,30,25,44]
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"attack_area": [21,18,27,26],
			"body_area": ["solid","all"],
			"duration": 6,
			"frame_info": [0,11,1,2,343,53,27,15],
			"frames": 1,
			"id": "stand",
			"image": "compiled-3.png",
			"rect": [343,42,370,69],
			"rotate_on_slope": true
		},
		{
			"accel_x": 200,
			"accel_y": 80,
			"attack_area": [21,18,27,26],
			"body_area": ["solid","all"],
			"duration": 7,
			"frame_info": [0,11,1,2,265,954,27,15,1,10,1,2,292,954,26,16,2,7,2,2,318,954,24,19,1,10,1,2,342,954,26,16],
			"frames": 4,
			"id": "walk",
			"image": "compiled-2.png",
			"rect": [265,943,292,970],
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": ["solid","all"],
			"duration": 4,
			"frame_info": [4,7,4,2,629,954,20,19],
			"frames": 1,
			"id": "spring",
			"image": "compiled-2.png",
			"rect": [625,947,652,974],
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"attack_area": [0,18,27,26],
			"body_area": ["solid","all"],
			"duration": 4,
			"frame_info": [3,11,3,2,531,53,22,15,5,11,6,2,553,53,17,15,3,11,3,2,570,53,22,15],
			"frames": 3,
			"id": "turn",
			"image": "compiled-3.png",
			"rect": [528,42,555,69],
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": ["solid","all"],
			"duration": 18,
			"frame_info": [1,9,2,2,64,36,25,17],
			"frames": 1,
			"id": "hurt",
			"image": "compiled-3.png",
			"rect": [63,27,90,54],
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"attack_area": [0,18,27,26],
			"body_area": ["solid","all"],
			"duration": 4,
			"frame_info": [3,1,4,2,668,766,21,25,6,4,7,2,689,766,15,22,5,8,6,2,704,766,17,18],
			"frames": 3,
			"frames_per_row": 3,
			"id": "land",
			"image": "compiled-2.png",
			"rect": [665,765,692,792],
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"attack_area": "all",
			"body_area": ["solid","all"],
			"duration": 40,
			"frame_info": [5,0,6,2,1007,464,17,26],
			"frames": 1,
			"frames_per_row": 1,
			"id": "fall",
			"image": "compiled-1.png",
			"rect": [1002,464,1029,491],
			"rotate_on_slope": true
		}
	],
	"consts": {
		"basic_type": "maggot_grey",
		"bounce_roundness": 70,
		"frogourmet_tag": "maggot_grey",
		"solid_dimensions": ["enemy","common"],
		"spring_amount": 1200,
		"springiness": 190,
		"thrown_type": "maggot_grey.thrown"
	},
	"editor_info": {
		"category": "enemies, cave"
	},
	"friction": 1000,
	"hitpoints": 20,
	"id": "maggot_grey",
	"mass": 5,
	"object_type": {
		"animation": [
			{
				"body_area": null,
				"duration": 60,
				"frames": 1,
				"id": "thrown",
				"image": "enemies/maggot-grey.png",
				"rect": [2,33,29,60],
				"thrown_area": "all"
			},
			{
				"body_area": "all",
				"duration": 5,
				"frames": 2,
				"id": "on_back",
				"image": "enemies/maggot-grey.png",
				"rect": [33,33,60,60]
			}
		],
		"consts": {
			"basic_type": "maggot_grey",
			"frogourmet_tag": "maggot_grey",
			"thrown_type": "maggot_grey.thrown"
		},
		"id": "thrown",
		"on_process_on_back": "[set(rotate, slope_standing_on + 30*sin(10*cycle)*(1.0-decimal(tmp.on_back_count)/consts.on_back_duration)),proto_event('throwable_small_enemy', 'process_on_back')]",
		"prototype": ["throwable_small_enemy"],
		"solid_area": [2,10,25,24],
		"solid_dimensions": ["common","enemy"]
	},
	"on_add_object_fail": "[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]",
	"on_ant_PROTO_bounced_on": "[sound('bug-bounce.wav'),animation('spring')]",
	"on_ant_PROTO_collide_feet": "animation('walk')",
	"on_ant_PROTO_die": "[score(level,points_value), spawn_item(self), death_burst_tracked(self)]",
	"on_ant_PROTO_end_anim": "animation('walk')",
	"on_ant_PROTO_solidity_fail": "if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me),
			   set(tmp.in_solidity_fail, 0)
			  ])",
	"on_bounced_on": "die()",
	"on_change_animation_failure": "fire_event('solidity_fail')",
	"on_change_solid_dimensions_fail": "fire_event('solidity_fail')",
	"on_collide_feet": "if(animation = 'fall' and collide_with.type != 'maggot_grey', set(animation, 'land'), proto_event('ant', 'collide_feet'))",
	"on_collide_head": "set(velocity_y, -velocity_y/2)",
	"on_collide_object_body": "if(collide_with.team != team and collide_with.team != 'evil_harmless' and (not (collide_with.team = 'evil' and team = 'evil_harmless')), if(collide_with_area in ['attack','thrown'], get_hit_by(collide_with)))",
	"on_collide_side": "if(not (animation in ['hurt']), [set(facing, -facing), animation('turn'), set(velocity_x,0)])",
	"on_create": "[animation('emerge')]",
	"on_die": "[score(level, points_value), death_burst_tracked(self)]",
	"on_end_anim": "if((not animation in ['wiggle', 'emerge', 'fall', 'land']), proto_event('ant', 'end_anim'))",
	"on_end_emerge_anim": "set(animation, 'wiggle')",
	"on_end_hurt_anim": "animation('walk')",
	"on_end_land_anim": "set(animation, 'stand')",
	"on_end_turn_anim": "animation('walk')",
	"on_end_wiggle_anim": "[set(vars.wiggle_count, vars.wiggle_count-1), if(vars.wiggle_count <= 0, set(animation, 'fall'), set(animation, 'wiggle'))]",
	"on_enter_walk_anim": "if(not is_standing, animation('stand'))",
	"on_enter_water": "die()",
	"on_jumped_on": "[if(jumped_on_by.mass >= 20, die())]",
	"on_outside_level": "[if(y > level.dimensions[3], add(hitpoints,-1))]",
	"on_process_stand": "if(is_standing, animation('walk'))",
	"on_solidity_fail": "die()",
	"on_stomped_on": "[add(hitpoints, -3), set(green, 100), set(blue, 100),
	                schedule(4, [set(green, 255), set(blue, 255)])]",
	"on_stuck": "if(not solid(level, midpoint_x, y+self.img_h-10), add(velocity_y, -1200), add(velocity_x, 1d600-300))",
	"on_surface_damage": "die()",
	"on_timer": "[set(rotate, slope_standing_on), if(is_standing and animation in ['walk','run'] and (should_turn_away_from_cliff or should_turn_towards_player),turn_around(),null)]",
	"platform_area": [2,10,25,11],
	"properties": {
		"ant_turns_at_cliffs": 1,
		"attack_damage": "if(not underwater, if(higher_difficulty, 2, 1))",
		"attack_knockback": 0,
		"cause_flinch": "def(collide_with) execute(me, [
			add(me.velocity_x,me.hurt_velocity_x * sign(collide_with.midpoint_x - me.midpoint_x)), 
			add(me.velocity_y,me.hurt_velocity_y),
			cause_hurt_anim(collide_with)
			])",
		"cause_hurt_anim": "def(collide_with) execute(me, if('hurt' in available_animations,set(me.animation, 'hurt')))",
		"damage_cooldown": 0,
		"display_hurt_visuals": "def() execute(me, 
					[
					hurt_flash_sequence()
					])",
		"display_posthit_invincibility_flash_sequence": "def() if(consts.posthit_invicibility_period, 
			map(range(consts.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(alpha,50),set(alpha,255))  ) ) )",
		"distance_to_cliff_check": "max(30, abs(velocity_x/7))",
		"facing_towards_player": "facing = if(level.player.midpoint_x < self.midpoint_x, -1, 1)",
		"flash_bright": "def() [set(me.brightness, 1023)]",
		"flash_off": "def() [set(me.brightness, 255),set(me.red, 255),set(me.green, 255), set(me.blue, 255)]",
		"flash_red": "def() [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]",
		"flinch_threshold": 3,
		"get_hit_by": "def(collide_with) execute(me, [
						handle_special_damage_response(collide_with),
	
						if((not is_invincible) and (collide_with.attack_damage > 0) and collide_with.hitpoints > 0 and (collide_with.attack_damage >= armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[display_hurt_visuals(),
								display_posthit_invincibility_flash_sequence(),
								handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])",
		"handle_damage": "def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))",
		"handle_damage_type": "def(collide_with)
						if(collide_with.damage_type = 'stun', if(consts.thrown_type, [add(velocity_y,hurt_velocity_y), set(type, consts.thrown_type), animation('on_back')] ))",
		"handle_flinch": "def(collide_with) 
			execute(me, if(collide_with.attack_damage >= flinch_threshold, cause_flinch(collide_with)))",
		"handle_knockback": "def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))",
		"handle_special_damage_response": "def(collide_with) null #virtual#",
		"higher_difficulty": "level.player.difficulty > level.player.difficulty_casual",
		"hittable_attack_damage": 0,
		"hittable_handle_damage_type": "def(collide_with) null #virtual#",
		"hittable_hurt_velocity_x": -200,
		"hittable_hurt_velocity_y": -400,
		"hurt_flash_sequence": "def()	[	flash_bright(),
									schedule(3, flash_red()),
									schedule(6, flash_bright()),
									schedule(9, flash_red()),
									schedule(12, flash_bright()),
									schedule(15, flash_off())]",
		"hurt_velocity_x": 200,
		"hurt_velocity_y": -400,
		"is_invincible": "if(invincible or level.in_dialog or is_invincible_posthit, 1, 0)",
		"is_invincible_posthit": "if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)",
		"lower_difficulty": "level.player.difficulty < level.player.difficulty_challenging",
		"should_turn_away_from_cliff": "(turns_at_cliffs and distance_to_cliff < distance_to_cliff_check)",
		"should_turn_towards_player": "(not facing_towards_player) and if(turns_towards_player and if(turns_towards_player_x_threshold,(turns_towards_player_x_threshold > x_distance_to_player),0), 1, 0)",
		"standard_thrown_damage": 400,
		"team": "'evil'",
		"turn_around": "def() if((should_turn_away_from_cliff) or (not turned_to_face_player_too_recently), [set(facing, -facing),animation('turn'), set(vars.last_turned,level.cycle)]) where turned_to_face_player_too_recently = abs(level.cycle - vars.last_turned) < turns_towards_player_delay",
		"turns_at_cliffs": 0,
		"turns_towards_player": "if(level.player.difficulty >= level.player.difficulty_challenging, 1, 0)",
		"turns_towards_player_delay": 200,
		"turns_towards_player_x_threshold": 250,
		"x_distance_to_player": "abs(mid_x - level.player.mid_x)",
		"y_distance_to_player": "abs(mid_y - level.player.mid_y)"
	},
	"solid_area": [2,10,25,24],
	"solid_dimensions": [],
	"tags": "swallowable",
	"timer_frequency": 2,
	"tmp": null,
	"traction": 1000,
	"variations": null,
	"vars": {
		"last_turned": 0,
		"points_value": 3,
		"wiggle_count": 3
	}
}