{
	"animation": [
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 4,
			"frame_info": [5,10,3,2,323,583,54,50,4,11,2,2,377,583,56,49,3,12,1,2,433,583,58,48],
			"frames": 3,
			"frames_per_row": 1,
			"id": "stand",
			"image": "compiled-1.png",
			"rect": [318,573,379,634],
			"reverse": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 4,
			"frame_info": [5,10,3,2,323,583,54,50,4,11,2,2,377,583,56,49,3,12,1,2,433,583,58,48],
			"frames": 3,
			"frames_per_row": 1,
			"id": "hurt",
			"image": "compiled-1.png",
			"rect": [318,573,379,634],
			"reverse": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 5,
			"events": "35:whoosh,42:launch_ball",
			"frame_info": [24,14,22,2,0,464,55,50,21,14,15,2,55,464,65,50,23,14,11,2,120,464,67,50,23,14,11,2,187,464,67,50,23,14,9,2,254,464,69,50,23,14,8,2,323,464,70,50,8,9,3,3,393,464,90,54,13,10,0,3,483,464,88,53,2,1,13,3,571,464,86,62,3,15,30,0,657,464,68,51,26,12,40,0,725,464,35,54,34,12,32,2,760,464,35,52],
			"frames": 12,
			"frames_per_row": 4,
			"id": "throw",
			"image": "compiled-1.png",
			"rect": [-24,450,76,515],
			"reverse": false,
			"solid_area": [40,22,62,60]
		}
	],
	"consts": {
		"basic_type": "bunny_ball_tosser",
		"frogourmet_tag": "bunny_ball_tosser"
	},
	"editor_info": {
		"category": "enemies, milgramen",
		"var": [
			{
				"name": "charge_time",
				"value": 2
			},
			{
				"name": "always_active",
				"type": "boolean",
				"value": 0
			}
		]
	},
	"hitpoints": 800,
	"id": "bunny_ball_tosser",
	"mass": 5,
	"object_type": [
		{
			"animation": {
				"id": "normal",
				"image": "enemies/bunny-ball-tosser.png",
				"pad": 4,
				"rect": [66,1,94,27]
			},
			"id": "cannonball_pile",
			"zorder": -3
		},
		{
			"always_active": true,
			"animation": {
				"accel_y": 30,
				"attack_area": "all",
				"body_area": "all",
				"duration": 400,
				"frames": 1,
				"frames_per_row": 1,
				"id": "thrown",
				"image": "enemies/bunny-ball-tosser.png",
				"pad": 0,
				"rect": [66,31,80,45]
			},
			"hitpoints": 32,
			"id": "thrown_metal_ball",
			"on_collide_feet": "[	set(hitpoints, hitpoints-1), 
							impact_cloud_silent(mid_x,y2,'small'),
							set(velocity_y, -(velocity_y*7)/10),
							thump(velocity_y)]",
			"on_collide_head": "[	set(velocity_y, -velocity_y),
							impact_cloud_silent(mid_x,y,'small'),
							thump(velocity_y)]",
			"on_collide_object_attack": "if(collide_with_area = 'body' and team != collide_with.team, die())",
			"on_collide_side": "[	set(hitpoints, hitpoints-1), 
							set(velocity_x, -(velocity_x*95)/100),
							impact_cloud_silent(x2,mid_y,'small'),
							thump(velocity_x)]",
			"on_create": "set(fall_through_platforms,10000)",
			"on_die": "death_burst(self)",
			"on_enter_water": "die()",
			"on_spat": "[set(vars.time_spat,level.cycle), set(velocity_x, velocity_x/2), set(velocity_y, velocity_y/2)]",
			"properties": {
				"attack_damage": "if(vars.time_spat, 400, 2)",
				"damage_cooldown": 5,
				"soundname": "'metal-ball-bounce'+1d3+'.wav'",
				"team": "if(vars.time_spat,'player','evil')",
				"thump": "def(speed) sound(soundname, constrain(0, 300.0/distance(self, level.player)*max(0, abs(speed)-140)/1000.0, 10))"
			},
			"solid_area": [4,4,8,8],
			"tags": "swallowable",
			"vars": {
				"has_been_spat": 0
			}
		}
	],
	"on_add_object_fail": "[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]",
	"on_change_animation_failure": "fire_event('solidity_fail')",
	"on_change_solid_dimensions_fail": "fire_event('solidity_fail')",
	"on_child_spawned": "if(child.type = 'bunny_ball_tosser.cannonball_pile', add(vars.children, [child]))",
	"on_collide_object_body": "if(collide_with.team != team and collide_with.team != 'evil_harmless' and (not (collide_with.team = 'evil' and team = 'evil_harmless')), if(collide_with_area in ['attack','thrown'], get_hit_by(collide_with)))",
	"on_create": "if(level.player.difficulty <= level.player.difficulty_casual, set(max_hitpoints, 400))",
	"on_die": "[map(vars.children, 'child', remove_object(child)), death_burst_tracked(self), spawn('die_cloud_recurring',mid_x,mid_y,facing)]",
	"on_end_hurt_anim": "animation('normal')",
	"on_end_stand_anim": "[set(vars.charge_up, vars.charge_up+1), if(vars.charge_up >= vars.charge_time, set(animation, 'throw'), set(animation, 'stand'))]",
	"on_end_throw_anim": "[set(vars.charge_up, 0), set(animation, 'stand')]",
	"on_launch_ball": "spawn('bunny_ball_tosser.thrown_metal_ball', midpoint_x, y, facing, [set(velocity_x, -facing*600-1d200),set(velocity_y, -400)])",
	"on_outside_level": "[if(y > level.dimensions[3], add(hitpoints,-1))]",
	"on_solidity_fail": "if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me),
			   set(tmp.in_solidity_fail, 0)
			  ])",
	"on_start_level": "[spawn('bunny_ball_tosser.cannonball_pile', img_mid_x + 64 * facing, img_mid_y + 36, facing)]",
	"on_whoosh": "sound('weapon-swing-hard'+1d3+'.wav')",
	"properties": {
		"attack_damage": 0,
		"attack_knockback": 0,
		"cause_flinch": "def(collide_with) execute(me, [
			add(me.velocity_x,me.hurt_velocity_x * sign(collide_with.midpoint_x - me.midpoint_x)), 
			add(me.velocity_y,me.hurt_velocity_y),
			cause_hurt_anim(collide_with)
			])",
		"cause_hurt_anim": "def(collide_with) execute(me, if('hurt' in available_animations,set(me.animation, 'hurt')))",
		"damage_cooldown": 0,
		"display_hurt_visuals": "def() execute(me, 
					[
					hurt_flash_sequence()
					])",
		"display_posthit_invincibility_flash_sequence": "def() if(consts.posthit_invicibility_period, 
			map(range(consts.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(alpha,50),set(alpha,255))  ) ) )",
		"flash_bright": "def() [set(me.brightness, 1023)]",
		"flash_off": "def() [set(me.brightness, 255),set(me.red, 255),set(me.green, 255), set(me.blue, 255)]",
		"flash_red": "def() [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]",
		"flinch_threshold": 1000,
		"get_hit_by": "def(collide_with) execute(me, [
						handle_special_damage_response(collide_with),
	
						if((not is_invincible) and (collide_with.attack_damage > 0) and collide_with.hitpoints > 0 and (collide_with.attack_damage >= armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[display_hurt_visuals(),
								display_posthit_invincibility_flash_sequence(),
								handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])",
		"handle_damage": "def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))",
		"handle_damage_type": "def(collide_with) null #virtual#",
		"handle_flinch": "def(collide_with) 
			execute(me, if(collide_with.attack_damage >= flinch_threshold, cause_flinch(collide_with)))",
		"handle_knockback": "def(collide_with) null",
		"handle_special_damage_response": "def(collide_with) null #virtual#",
		"higher_difficulty": "level.player.difficulty > level.player.difficulty_casual",
		"hittable_flinch_threshold": 3,
		"hittable_handle_knockback": "def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))",
		"hurt_flash_sequence": "def()	[	flash_bright(),
									schedule(3, flash_red()),
									schedule(6, flash_bright()),
									schedule(9, flash_red()),
									schedule(12, flash_bright()),
									schedule(15, flash_off())]",
		"hurt_velocity_x": -200,
		"hurt_velocity_y": -400,
		"is_invincible": "if(invincible or level.in_dialog or is_invincible_posthit, 1, 0)",
		"is_invincible_posthit": "if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)",
		"lower_difficulty": "level.player.difficulty < level.player.difficulty_challenging",
		"standard_thrown_damage": 400,
		"team": "'evil'",
		"thump": "def(name, speed) sound(name, constrain(0, 300.0/distance(self, level.player)*max(0, abs(speed)-140)/1000.0, 10))"
	},
	"solid_area": [20,18,42,56],
	"tmp": null,
	"variations": null,
	"vars": {
		"always_active": 0,
		"charge_time": 2,
		"charge_up": 0,
		"points_value": 27
	}
}