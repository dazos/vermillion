{
	"animation": [
		{
			"accel_x": 0,
			"accel_y": 80,
			"duplicates": 6,
			"duration": 6,
			"frame_info": [4,8,5,1,510,740,23,24,4,7,5,1,533,740,23,25,4,6,5,1,556,740,23,26],
			"frames": 3,
			"id": "stand",
			"image": "compiled-2.png",
			"interact_area": "all",
			"rect": [506,732,537,764],
			"reverse": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"duration": 6,
			"frame_info": [4,8,5,1,441,740,23,24,4,7,5,1,464,740,23,25,4,6,5,1,487,740,23,26],
			"frames": 3,
			"id": "stand",
			"image": "compiled-2.png",
			"interact_area": "all",
			"rect": [437,732,468,764],
			"reverse": true
		},
		{
			"accel_x": 400,
			"accel_y": 80,
			"duration": 5,
			"frame_info": [13,16,15,5,506,631,20,27,9,14,14,8,526,631,25,26,9,15,15,6,551,631,24,27,11,16,16,6,575,631,21,26,8,15,16,6,596,631,24,27,5,14,16,6,620,631,27,28,11,15,16,6,647,631,21,27,11,17,16,5,668,631,21,26],
			"frames": 8,
			"id": "walk",
			"image": "compiled-2.png",
			"interact_area": "all",
			"rect": [493,615,540,662],
			"solid_area": [17,18,31,40]
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"duration": 5,
			"frame_info": [6,7,5,0,420,740,21,26],
			"frames": 1,
			"id": "turn",
			"image": "compiled-2.png",
			"interact_area": "all",
			"rect": [414,733,445,765]
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"frame_info": [4,8,5,1,832,817,23,24],
			"id": "portrait",
			"image": "compiled-2.png",
			"interact_area": "all",
			"rect": [828,809,859,841],
			"scale": 6
		}
	],
	"consts": {
		"can_stand": true,
		"can_walk": true
	},
	"editor_info": {
		"category": "NPCs",
		"help": "start mode: Action to start the level in.
turns_at_cliff: If true, the object will turn before it falls off a cliff. Doesn't apply to walking into one.
potters: The object will sort of faff about a bit.
potter_timeout: Number of frames the object will faff about for. Frogatto runs af 50 frames per second.",
		"var": [
			{
				"name": "default_speech_text",
				"type": "text",
				"value": ""
			},
			{
				"name": "max_x",
				"type": "x",
				"value": "midpoint_x + 200"
			},
			{
				"name": "min_x",
				"type": "x",
				"value": "midpoint_x - 200"
			},
			{
				"name": "potter_timeout",
				"type": "int",
				"value": "100"
			},
			{
				"enum_values": "never,limits,always",
				"name": "potters",
				"type": "enum",
				"value": "'never'"
			},
			{
				"enum_values": "walk, stand",
				"name": "start_mode",
				"type": "enum",
				"value": "'walk'"
			},
			{
				"enum_values": "face_player,random,never",
				"name": "turning_behaviour",
				"type": "enum",
				"value": "face_player"
			},
			{
				"name": "turns_at_cliff",
				"type": "boolean",
				"value": "true"
			}
		]
	},
	"friction": 1000,
	"hitpoints": 1,
	"id": "kinguin_npc",
	"on_create": "if(start_mode, animation(start_mode), stand())",
	"on_end_anim": "if(not animation in ['stand','turn','walk'],animation(animation),   if(paused, stand(),regular_behavior()))",
	"on_end_stand_anim": "[
	[	//Legacy, to ease the transition from the turn_to_face_player variable to the turning_behaviour variable.
		if(turn_to_face_player,
			set(facing, if(level.player.x < x, -1, 1))), 
		animation('stand'),
	], 
	[	//New code. Delete the above when all instances of turn_to_face_player have been removed from the game.
		animation('stand'),
		switch(turning_behaviour,
			'face_player', set(facing, if(level.player.x < x, -1, 1)),
			'random', if(not 1d2-1, set(facing, 1d2-1)),
			/*'never',*/ null, //Uncomment this when all NPCs actually have turning_behaviour set. It should enforce the turning behaviour variable by crashing if it's not set, or set incorrectly. I believe this behaviour to be the most correct, since when errors occur it'll fail fast.
		)
	]
	]",
	"on_have_distance": "[
	set(level.player.control_lock, ['ctrl_right']), 
	schedule(2, 
		fire_event('start_talking')),
	]",
	"on_interact": "[
	set(level.zoom, 2), 
	pause(),
	set(level.player.control_lock, ['ctrl_left']), 
	
	set(level.player.tmp.running, 0), 
	schedule(20, 
		fire_event('have_distance')),
	]",
	"on_process": "[if(animation in walking_animations,
					if(self.is_at_target, fire_event(self,'reach_target') ))]",
	"on_reach_target": "[[set(self.vars.start_mode, 'stand'),stand()], set(self.vars.target,null)
, target_callback]",
	"on_resume": "regular_behavior()",
	"on_start_talking": "[
	set(level.player.control_lock, null), 
	fire_event('talk'), 
	set(level.zoom, 1),
	resume(),
	]",
	"on_talk": "if(default_speech_text, speech_dialog(self, [default_speech_text]))",
	"on_walking_npc_PROTO_create": "regular_behavior()",
	"properties": {
		"begin_pacing": "def() [
		set('start_mode','walk'),
		set(self.vars.target, null),
		set(self.vars.turns, true)]",
		"begin_walking": "def() [
		set('start_mode','walk'),
		set(self.vars.target, null),
		set(self.vars.turns, false)]",
		"is_at_target": "if(self.vars.target and ((self.vars.target < self.mid_x and facing > 0) or (target > self.mid_x and facing <= 0)), 1, 0)",
		"outside_limits": "if(turns,
				if(facing > 0,
					if(mid_x + margin > max_x, 1, 0), 
					if(mid_x - margin < min_x, 1, 0)),
			)",
		"pace_to": "def(new_min_x, new_max_x) [
		if(new_min_x < new_max_x, [
			set(self.vars.min_x, new_min_x),
			set(self.vars.max_x, new_max_x),
			],[
			set(self.vars.min_x, new_max_x),
			set(self.vars.max_x, new_min_x),
			]),
		self.begin_pacing()]",
		"pause": "def() [animation('stand'), set(vars.paused,1)]",
		"potter": "def() [if(1d2,stand(),turn()), if(level.cycle - last_started_pottering > potter_timeout, set(last_started_pottering,level.cycle))]",
		"regular_behavior": "def() if(start_mode = 'stand', stand(), walk())",
		"resume": "def() [fire_event('resume'), set(vars.paused,0)]",
		"should_potter": "if(target, 0,  /*if we have a target, don't potter at all*/
						if(level.cycle - last_started_pottering < potter_timeout, 1, if(1d2-1, if(potters = 'always', 1, if(potters = 'limits' and outside_limits, 1,0)))))",
		"should_turn": "if(not target, if(turns_at_cliff and distance_to_cliff < cliff_margin,1,
						if(outside_limits,1,0))
							where margin = 50
							where cliff_margin = 110,
					/* if we DO have a target, then all the above rules are off; go ahead and walk off cliffs, or leave our bounds, the target is more important.*/
					if((target < self.mid_x and facing > 0) or (target > self.mid_x and facing <= 0), 1, 0))",
		"stand": "def() animation('stand')",
		"turn": "def() [animation('turn'), set(facing, -facing)]",
		"walk": "def() if(should_turn, if(should_potter, potter(), turn()),
					if(should_potter, potter(),
						animation('walk') ))",
		"walk_to": "def(target_x, callback=null) [
		set(self.vars.target, target_x),
		set(self.vars.target_callback, callback),
		set(self.vars.start_mode, 'walk')
		]"
	},
	"solid_area": [8,10,23,30],
	"solid_dimensions": [],
	"tmp": null,
	"traction": 1000,
	"variations": null,
	"vars": {
		"default_speech_text": null,
		"max_x": null,
		"min_x": null,
		"paused": 0,
		"potter_timeout": null,
		"potters": null,
		"start_mode": null,
		"target": null,
		"target_callback": null,
		"turning_behaviour": null,
		"turns": true,
		"turns_at_cliff": null,
		"walking_animations": ["walk"]
	},
	"zorder": -2
}