{
	"animation": {
		"duration": -1,
		"h": 28,
		"id": "normal",
		"image": "effects/particles.png",
		"w": 28,
		"x": 210,
		"y": 166
	},
	"editor_info": {
		"category": "platforms",
		"var": [
			{
				"name": "control_points",
				"type": "points",
				"value": "[]"
			},
			{
				"enum_values": "circuit,reverse,stop,fall",
				"name": "end_behavior",
				"type": "enum",
				"value": "'circuit'"
			},
			{
				"name": "move_when_stood_on",
				"type": "boolean",
				"value": 0
			},
			{
				"name": "is_moving",
				"type": "boolean",
				"value": 1
			},
			{
				"name": "move_speed",
				"type": "decimal",
				"value": 1.0
			},
			{
				"name": "maintain_speed_near_points",
				"type": "boolean",
				"value": 0
			},
			{
				"enum_values": "nothing,top,bottom,both",
				"name": "waits_at",
				"type": "enum",
				"value": "'nothing'"
			},
			{
				"enum_values": "platform,circular_saw",
				"name": "moving_object_type",
				"type": "enum",
				"value": "'platform'"
			}
		]
	},
	"hidden_in_game": true,
	"id": "object_tracked_dungeon",
	"object_type": [
		{
			"animation": {
				"duration": 10000,
				"h": 32,
				"id": "normal",
				"image": "props/platform-tracked-dungeon.png",
				"no_remove_alpha_borders": true,
				"palettes": ["chrome_to_brass","dungeon_blue","dungeon_gloom","dungeon_green","dungeon_moonlit","dungeon_rusty","dungeon_teal","dungeon_mossy","dungeon_violet"],
				"w": 48,
				"x": 0,
				"y": 0
			},
			"id": "platform",
			"on_jumped_on": "if(parent.vars.move_when_stood_on = 1 and level.player.standing_on = me, set(parent.vars.is_moving,1))",
			"platform_area": [0,4,48,5],
			"zorder": 0
		},
		{
			"animation": {
				"attack_area": [4,4,38,38],
				"duration": 10000,
				"h": 42,
				"id": "normal",
				"image": "props/circular-saw.png",
				"no_remove_alpha_borders": true,
				"palettes": ["chrome_to_brass","dungeon_blue","dungeon_gloom","dungeon_green","dungeon_moonlit","dungeon_rusty","dungeon_teal","dungeon_mossy","dungeon_violet"],
				"w": 42,
				"x": 0,
				"y": 0
			},
			"id": "circular_saw",
			"on_process": "[add(rotate,amount),blur(250,75,2)] where amount = 30*sin(cycle*2)",
			"properties": {
				"attack_damage": 400,
				"attack_damage_to_player": "if(level.player.difficulty > level.player.difficulty_casual, 6, 2)",
				"team": "'neutral'"
			},
			"prototype": ["standard_values"],
			"zorder": 0
		},
		{
			"animation": {
				"h": 16,
				"id": "normal",
				"image": "props/elevator-track-mount.png",
				"palettes": ["chrome_to_brass","dungeon_blue","dungeon_gloom","dungeon_green","dungeon_moonlit","dungeon_rusty","dungeon_teal","dungeon_mossy","dungeon_violet"],
				"w": 16,
				"x": 0,
				"y": 0
			},
			"id": "track_plate",
			"zorder": -4
		},
		{
			"animation": {
				"h": 16,
				"id": "normal",
				"image": "props/elevator-track-mount.png",
				"palettes": ["chrome_to_brass","dungeon_blue","dungeon_gloom","dungeon_green","dungeon_moonlit","dungeon_rusty","dungeon_teal","dungeon_mossy","dungeon_violet"],
				"w": 16,
				"x": 16,
				"y": 0
			},
			"id": "track_bolt",
			"zorder": -2
		}
	],
	"on_process": "[
	   if(vars.control_points and size(vars.control_points) >= 2 and is_moving,
		([	add(vars.position, 
				400/distance(this_node, next_node) //fudge multiplier. Large number, faster platforms.
				* if(not maintain_speed_near_points,
					constrain(base_speed, cos(this_portion/100.0*2-100)*100+base_speed, base_speed+100) where base_speed = speed*20, //This makes the platform slow down if we're near a point.
					100)),
			if(vars.end_behavior = 'stop' and index >= (size(vars.control_points)-1), set(vars.is_moving,false)),
			if(vars.end_behavior = 'fall' and index >= (size(vars.control_points)-1), [set(vars.is_moving,false), set(moving_object.accel_y,80)]),
			set(moving_object.midpoint_x, (this_node[0]*this_portion + next_node[0]*next_portion)/10000),
			set(moving_object.midpoint_y, (this_node[1]*this_portion + next_node[1]*next_portion)/10000),
			set(last_node, this_node),
			if(last_node != this_node,
				switch(waits_at,
				'top', if(this_node[1] < last_node[1] and this_node[1] < next_node[1], set(is_moving, false)),
				'bottom', if(this_node[1] > last_node[1] and this_node[1] > next_node[1], set(is_moving, false)),
				'both', if((this_node[1] > last_node[1] and this_node[1] > next_node[1]) or (this_node[1] < last_node[1] and this_node[1] < next_node[1]), set(is_moving, false)),
				)),
	    ] where this_node = vars.control_points[node_behavior(index)],
		        next_node = vars.control_points[node_behavior(index+1)],
				this_portion = 10000 - timing%10000,
				next_portion = timing%10000)
		            where index = switch(end_behavior,
		            		'circuit',	(timing/10000)%size(vars.control_points),
		            		'reverse',  (timing/10000)%(2*(size(vars.control_points)-1)),
		            		'stop',		min((timing/10000),size(vars.control_points)),
		            		'fall',		min((timing/10000),size(vars.control_points)))
		            
		) where timing = vars.position*speed,]",
	"on_start_level": "[
	setup,
	if(size(control_points), set(last_node, control_points[0]))]",
	"properties": {
		"actb_size": "200 + max(abs(sort(map(control_points, value[0]),a < b)[0] - sort(map(control_points, value[0]),a < b)[arlength]), abs(sort(map(control_points, value[1]),a < b)[0] - sort(map(control_points, value[1]),a < b)[arlength]))  where arlength = control_points.size - 1",
		"draw_track": "def(track_points)	[if(size(track_points) > 1,
			#Draw track segments between each point in our path#
			map(range(size(track_points)-1), 'index', [
				[obj.set_ends(	track_points[index][0],
								track_points[index][1],
								track_points[index+1][0],
								track_points[index+1][1]),
				set(obj.animation, 'track'),
				set(obj.z, self.z-2),
				add_object(obj)] where obj = object('rope_angled_controller')  ])),
				
				#ONLY if we're a circuit, we add a special final piece of track that closes the loop between the first and last ones#
				if(size(track_points) > 2 and end_behavior = 'circuit',
					[obj.set_ends(	track_points[0][0],
								track_points[0][1],
								track_points[track_points.size-1][0],
								track_points[track_points.size-1][1]),
				set(obj.animation, 'track'),
				set(obj.z, self.z-2),
				add_object(obj)] where obj = object('rope_angled_controller')
					
					)
				]",
		"move_to_start": "def(obj) execute(me,if(vars.control_points.size > 0, [set(obj.midpoint_x, vars.control_points[0][0]), set(obj.midpoint_y, vars.control_points[0][1])]))",
		"node_behavior": "def(index) switch(vars.end_behavior,
					'circuit', (index)%size(vars.control_points),
					'reverse', (abs((index)%(2*size) - size)) where size = (size(vars.control_points)-1),
					'stop', min(size(vars.control_points), (index)%size(vars.control_points)),
					'fall', min(size(vars.control_points), (index)%size(vars.control_points)),
					)",
		"setup": "[map(vars.control_points, spawn_track_plate(value)), draw_track(vars.control_points), set(activation_border,actb_size),if(vars.end_behavior = 'reverse',set(vars.position,10000*(size(vars.control_points)-1))),
		spawn(me.type+'.'+moving_object_type,x,y,facing, [set(vars.moving_object,child),me.move_to_start(child),set(child.activation_border, actb_size),set(parent,me)])]",
		"spawn_track_plate": "def(coords) [spawn(self.type + '.track_plate', coords[0], coords[1], 1),
							spawn(self.type + '.track_bolt', coords[0], coords[1], 1, set(child.z, self.z-1))]",
		"speed": "vars.move_speed"
	},
	"vars": {
		"control_points": null,
		"end_behavior": null,
		"is_moving": null,
		"last_node": [0,0],
		"maintain_speed_near_points": null,
		"move_speed": null,
		"move_when_stood_on": null,
		"moving_object_type": null,
		"position": 1,
		"waits_at": null
	}
}