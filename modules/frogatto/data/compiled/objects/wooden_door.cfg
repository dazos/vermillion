{
	"animation": [
		{
			"duration": 10000000,
			"frame_info": [0,11,0,0,924,78,20,38],
			"frames": 1,
			"id": "normal",
			"image": "compiled-2.png",
			"interact_area": "all",
			"rect": [924,67,943,115]
		},
		{
			"duration": 10000000,
			"frame_info": [0,11,0,0,904,78,20,38],
			"frames": 1,
			"id": "ajar",
			"image": "compiled-2.png",
			"rect": [904,67,923,115]
		},
		{
			"duration": 3,
			"events": "14:enter",
			"frame_info": [0,11,0,0,804,78,20,38,0,11,0,0,824,78,20,38,0,11,0,0,844,78,20,38,0,11,0,0,864,78,20,38,0,11,0,0,884,78,20,38],
			"frames": 5,
			"id": "open",
			"image": "compiled-2.png",
			"rect": [804,67,823,115]
		},
		{
			"duration": 3,
			"frame_info": [0,11,0,0,804,78,20,38,0,11,0,0,824,78,20,38,0,11,0,0,844,78,20,38,0,11,0,0,864,78,20,38,0,11,0,0,884,78,20,38],
			"frames": 5,
			"id": "close",
			"image": "compiled-2.png",
			"play_backwards": true,
			"rect": [804,67,823,115]
		}
	],
	"consts": null,
	"editor_info": {
		"category": "buildings, portals",
		"help": "If the destination level and door are not set, this will be non-interactive
		scenery.  Locking this door is trivial - place the 'padlock' atop it, and it will
		autodetect the presence of the lock, and also any interactions with 'padlock_key's,
		correctly unlocking only for the appropriate color.",
		"var": [
			{
				"name": "dest_level",
				"type": "level"
			},
			{
				"info": "dest_level",
				"name": "dest_door",
				"type": "label"
			},
			{
				"name": "goes_to_illuminated_place",
				"type": "boolean",
				"value": 0
			}
		]
	},
	"id": "wooden_door",
	"on_collide_object": "test_locks(collide_with)",
	"on_end_ajar_anim": "animation('ajar')",
	"on_end_close_anim": "[animation('normal'),sound('DoorShut.ogg')]",
	"on_end_normal_anim": "animation('normal')",
	"on_end_open_anim": "animation('ajar')",
	"on_enter": "[if(vars.player_opened and dest_door, teleport(if(dest_level and dest_level != level.id, dest_level,null), dest_door, 'iris')),
	           [ schedule(60,set(animation, 'close')),set(vars.player_opened,null)] ]",
	"on_interact": "[fire_event(level.player, 'start_interact'),
		if(locks, if(level.player.vars.swallowed, test_locks(level.player.vars.swallowed)), [set(vars.player_opened, cycle),fire_event('open')])]",
	"on_open": "[
			if(cycle > 20,sound('DoorOpen.ogg')),
			animation('open')
		]",
	"on_start_level": "if(goes_to_illuminated_place, [add(variations, ['goes_to_illuminated_place']),animation('normal')])",
	"on_talk": "if(locks, speech_dialog(level.player, set(level.player.animation,'emote_geez'),[~Nope, it's locked.~]))",
	"properties": {
		"locks": "filter(level.chars, 'char', char.type = 'padlock' and abs(distance(context.me, char)) < 100)",
		"test_locks": "def(key)	map(locks, 'lock', 
								if(lock.variations = key.variations, 
									[fire_event(lock, 'unlock'), 
										if(level.player.vars.swallowed = key,empty_belly(),remove_object(key))])) where empty_belly = def() [set(level.player.variations, []), set(level.player.vars.swallowed, null)]"
	},
	"tmp": null,
	"variations": {
		"goes_to_illuminated_place": "null"
	},
	"vars": {
		"dest_door": null,
		"dest_level": null,
		"goes_to_illuminated_place": null
	},
	"zorder": -3
}