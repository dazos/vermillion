{
	"activation_border": 500,
	"animation": [
		{
			"accel_x": 0,
			"accel_y": 80,
			"attack_area": [26,18,35,28],
			"body_area": "all",
			"duration": 5,
			"frame_info": [2,5,2,2,676,912,28,21,2,6,2,2,704,912,28,20,2,6,1,2,732,912,29,20],
			"frames": 3,
			"id": "stand",
			"image": "compiled-2.png",
			"rect": [674,907,705,934],
			"reverse": true,
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"attack_area": [26,18,35,28],
			"body_area": "all",
			"duration": 5,
			"frame_info": [2,5,2,2,761,912,28,21,2,6,2,2,789,912,28,20,2,6,1,2,817,912,29,20],
			"frames": 3,
			"id": "stand",
			"image": "compiled-2.png",
			"rect": [759,907,790,934],
			"reverse": true,
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 5,
			"frame_info": [3,2,3,2,163,817,26,24,2,4,2,2,189,817,28,22],
			"frames": 2,
			"frames_per_row": 1,
			"id": "cooloff",
			"image": "compiled-2.png",
			"rect": [160,815,191,842],
			"reverse": true,
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 18,
			"frame_info": [4,3,4,1,139,817,24,24],
			"frames": 1,
			"id": "cooloff_hurt",
			"image": "compiled-2.png",
			"rect": [135,814,166,841],
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"attack_area": [26,18,35,28],
			"body_area": "all",
			"duration": 4,
			"frame_info": [5,3,3,2,405,866,24,23,5,3,4,2,429,866,23,23,5,3,3,2,452,866,24,23,5,3,4,2,476,866,23,23,5,3,4,2,499,866,23,23,5,3,4,2,522,866,23,23,5,3,4,2,545,866,23,23,5,3,4,2,568,866,23,23],
			"frames": 8,
			"frames_per_row": 4,
			"id": "hop",
			"image": "compiled-2.png",
			"rect": [400,863,431,890],
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"attack_area": [26,18,35,28],
			"body_area": "all",
			"duration": 2,
			"frame_info": [5,3,3,2,405,866,24,23,5,3,4,2,429,866,23,23,5,3,3,2,452,866,24,23,5,3,4,2,476,866,23,23,5,3,4,2,499,866,23,23,5,3,4,2,522,866,23,23,5,3,4,2,545,866,23,23,5,3,4,2,568,866,23,23],
			"frames": 8,
			"frames_per_row": 4,
			"id": "littlehop",
			"image": "compiled-2.png",
			"rect": [400,863,431,890],
			"rotate_on_slope": true
		},
		{
			"accel_x": 450,
			"accel_y": 80,
			"attack_area": [26,18,35,28],
			"body_area": "all",
			"duration": 2,
			"frame_info": [2,5,2,2,846,912,28,21,2,4,2,3,874,912,28,21,2,3,2,4,902,912,28,21,2,4,2,3,930,912,28,21],
			"frames": 4,
			"id": "walk",
			"image": "compiled-2.png",
			"rect": [844,907,875,934],
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 5,
			"frame_info": [2,8,2,2,849,0,28,18],
			"frames": 1,
			"id": "spring",
			"image": "compiled-3.png",
			"rect": [847,-8,878,19],
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"attack_area": [11,18,35,28],
			"body_area": "all",
			"duration": 5,
			"frame_info": [3,5,4,2,86,912,25,21,3,5,4,2,111,912,25,21,4,5,3,2,136,912,25,21],
			"frames": 3,
			"frames_per_row": 1,
			"id": "turn",
			"image": "compiled-2.png",
			"rect": [83,907,114,934],
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 18,
			"frame_info": [2,3,2,3,790,889,28,22],
			"frames": 1,
			"id": "hurt",
			"image": "compiled-2.png",
			"rect": [788,886,819,913],
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 50,
			"frame_info": [2,10,2,2,770,36,28,16],
			"frames": 1,
			"id": "turtled",
			"image": "compiled-3.png",
			"rect": [768,26,799,53],
			"rotate_on_slope": true
		}
	],
	"consts": {
		"bounce_roundness": 70,
		"size": 32,
		"solid_dimensions": ["enemy","common"],
		"spring_amount": 1200,
		"springiness": 190
	},
	"editor_info": {
		"category": "enemies, cave",
		"var": {
			"name": "charge_time",
			"value": 6
		}
	},
	"friction": 1000,
	"hitpoints": 200,
	"id": "hopper_armored",
	"mass": 5,
	"object_type": [
		{
			"animation": {
				"duration": 3,
				"frames": 5,
				"frames_per_row": 1,
				"id": "normal",
				"image": "enemies/hopper.png",
				"pad": 3,
				"rect": [178,1,219,42]
			},
			"id": "shot_bloom",
			"on_end_anim": "die()"
		},
		{
			"animation": {
				"attack_area": "all",
				"duration": 2,
				"frames": 6,
				"frames_per_row": 3,
				"id": "normal",
				"image": "enemies/hopper.png",
				"no_remove_alpha_borders": true,
				"pad": 3,
				"rect": [3,184,34,215]
			},
			"id": "shot_impact",
			"on_end_anim": "die()"
		},
		{
			"activation_border": 500,
			"animation": {
				"attack_area": "all",
				"duration": 2,
				"frames": 5,
				"frames_per_row": 1,
				"id": "normal",
				"image": "enemies/hopper.png",
				"no_remove_alpha_borders": true,
				"pad": 3,
				"rect": [223,1,254,32]
			},
			"id": "shot",
			"on_collide_level": "if(cycle > 30,die())",
			"on_die": "spawn('hopper_armored.shot_impact', mid_x,mid_y,1,[set(rotate,rotate)])",
			"on_end_anim": "animation('normal')",
			"on_process": "set(lights, circle_light(me, wave(cycle*100+1d20)/50))",
			"on_timer": "die()",
			"properties": {
				"attack_damage": "if(level.player.difficulty <= level.player.difficulty_casual,1,3)"
			},
			"prototype": ["shot"],
			"timer_frequency": 200,
			"traction_in_air": 1000
		}
	],
	"on_add_object_fail": "[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]",
	"on_ant_PROTO_bounced_on": "[sound('bug-bounce.wav'),animation('spring')]",
	"on_ant_PROTO_collide_feet": "animation('walk')",
	"on_ant_PROTO_collide_head": "set(velocity_y, -velocity_y/2)",
	"on_ant_PROTO_end_anim": "animation('walk')",
	"on_ant_PROTO_end_hurt_anim": "animation('walk')",
	"on_ant_PROTO_enter_walk_anim": "if(not is_standing, animation('stand'))",
	"on_ant_PROTO_process_stand": "if(is_standing, animation('walk'))",
	"on_ant_PROTO_timer": "[set(rotate, slope_standing_on), if(is_standing and animation in ['walk','run'] and (should_turn_away_from_cliff or should_turn_towards_player),turn_around(),null)]",
	"on_bounced_on": "[if(animation in ['turtled'],sound('hopper-block1.wav'),sound('bug-bounce.wav')),if(not animation in ['cooloff','turtled'],animation('spring'))]",
	"on_change_animation_failure": "fire_event('solidity_fail')",
	"on_change_solid_dimensions_fail": "fire_event('solidity_fail')",
	"on_collide_feet": "if(needs_to_recover, animation('cooloff'),animation('stand'))",
	"on_collide_head": "[if(past_shooting_interval, shoot()),set(velocity_y,velocity_y/2)]",
	"on_collide_object_body": "if(collide_with.team != team and collide_with.team != 'evil_harmless' and (not (collide_with.team = 'evil' and team = 'evil_harmless')), if(collide_with_area in ['attack','thrown'], get_hit_by(collide_with)))",
	"on_collide_side": "if(not (animation in ['hurt']), [set(facing, -facing), animation('turn'), set(velocity_x,0)])",
	"on_die": "[score(level,points_value), spawn_item(self), death_burst_tracked(self)]",
	"on_end_anim": "[switch(animation,
							'cooloff',   if(vars.cool_off > 3, [set(vars.cool_off, 0),fire_event('littlehop')],[animation('cooloff'),add(vars.cool_off,1)]),
							'walk',   if(should_walk,animation('walk'),animation('stand')),
							'hop', if(not is_standing, animation('hop'), animation('stand')),
							'stand', if(should_turn, turn(), if(should_walk, animation('walk'), if(should_hop, fire_event('hop'), animation('stand')))),
							'hurt', if(is_standing, animation('turtled'), animation('stand')),
							'turtled', if(is_standing and (player_is_facing_us or abs(to_player) < 250), animation('turtled'), animation('stand')),
							animation('stand'))
							
							,control_brightness()]",
	"on_end_hurt_anim": "null",
	"on_end_turn_anim": "animation('walk')",
	"on_enter_walk_anim": "",
	"on_enter_water": "die()",
	"on_hop": "[
			play_jump_sound(),
			set(vars.last_hopped, level.cycle),
			animation('hop'),
			set(velocity_y, jump_power),
			]",
	"on_jumped_on": "[if(jumped_on_by.mass >= 20, die())]",
	"on_littlehop": "[
			set(vars.last_hopped, level.cycle),
			animation('littlehop'),
			set(velocity_y, jump_power/4.0),
			]",
	"on_outside_level": "[if(y > level.dimensions[3], add(hitpoints,-1))]",
	"on_process_hop": "[if(should_shoot, shoot()), control_brightness()]",
	"on_process_stand": "",
	"on_solidity_fail": "if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me),
			   set(tmp.in_solidity_fail, 0)
			  ])",
	"on_stomped_on": "[add(hitpoints, -3), set(green, 100), set(blue, 100),
	                schedule(4, [set(green, 255), set(blue, 255)])]",
	"on_stuck": "if(not solid(level, midpoint_x, y+self.img_h-10), add(velocity_y, -1200), add(velocity_x, 1d600-300))",
	"on_surface_damage": "die()",
	"on_timer": "",
	"properties": {
		"ant_attack_damage": "if(not underwater, if(higher_difficulty, 2, 1))",
		"ant_cause_hurt_anim": "def(collide_with) execute(me, if('hurt' in available_animations,set(me.animation, 'hurt')))",
		"ant_handle_damage": "def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))",
		"ant_handle_special_damage_response": "def(collide_with) null #virtual#",
		"ant_hurt_velocity_x": 200,
		"ant_hurt_velocity_y": -400,
		"armor": "if(animation='turtled',500,0)",
		"attack_damage": "if(level.player.difficulty <= level.player.difficulty_casual,1,2)",
		"attack_knockback": 0,
		"being_stood_on": "(filter(level.chars, me = value.standing_on).size > 0)",
		"cause_flinch": "def(collide_with) execute(me, [
			add(me.velocity_x,me.hurt_velocity_x * sign(collide_with.midpoint_x - me.midpoint_x)), 
			add(me.velocity_y,me.hurt_velocity_y),
			cause_hurt_anim(collide_with)
			])",
		"cause_hurt_anim": "def(collide_with) execute(me, if(animation in ['cooloff', 'cooloff_hurt'],set(me.animation, 'cooloff_hurt'),set(me.animation, 'hurt')))",
		"control_brightness": "def() if((past_shooting_interval), add(brightness,50),set(brightness,255))",
		"damage_cooldown": 0,
		"display_hurt_visuals": "def() execute(me, 
					[
					hurt_flash_sequence()
					])",
		"display_posthit_invincibility_flash_sequence": "def() if(consts.posthit_invicibility_period, 
			map(range(consts.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(alpha,50),set(alpha,255))  ) ) )",
		"distance_to_cliff_check": "max(30, abs(velocity_x/7))",
		"facing_towards_player": "facing = if(level.player.midpoint_x < self.midpoint_x, -1, 1)",
		"flash_bright": "def() [set(me.brightness, 1023)]",
		"flash_off": "def() [set(me.brightness, 255),set(me.red, 255),set(me.green, 255), set(me.blue, 255)]",
		"flash_red": "def() [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]",
		"flinch_threshold": 3,
		"get_hit_by": "def(collide_with) execute(me, [
						handle_special_damage_response(collide_with),
	
						if((not is_invincible) and (collide_with.attack_damage > 0) and collide_with.hitpoints > 0 and (collide_with.attack_damage >= armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[display_hurt_visuals(),
								display_posthit_invincibility_flash_sequence(),
								handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])",
		"handle_damage": "def(collide_with) execute(me,add(me.hitpoints, - dependent_damage)) where dependent_damage = if(animation = 'cooloff', collide_with.attack_damage, collide_with.attack_damage/10)",
		"handle_damage_type": "def(collide_with)
						if(collide_with.damage_type = 'stun', if(consts.thrown_type, [add(velocity_y,hurt_velocity_y), set(type, consts.thrown_type), animation('on_back')] ))",
		"handle_flinch": "def(collide_with) 
			execute(me, if(collide_with.attack_damage >= flinch_threshold, cause_flinch(collide_with)))",
		"handle_knockback": "def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))",
		"handle_special_damage_response": "def(collide_with) if(armor > 0, sound('hopper-block1.wav'))",
		"higher_difficulty": "level.player.difficulty > level.player.difficulty_casual",
		"hittable_attack_damage": 0,
		"hittable_handle_damage_type": "def(collide_with) null #virtual#",
		"hittable_hurt_velocity_x": -200,
		"hittable_hurt_velocity_y": -400,
		"hurt_flash_sequence": "def()	[	flash_bright(),
									schedule(3, flash_red()),
									schedule(6, flash_bright()),
									schedule(9, flash_red()),
									schedule(12, flash_bright()),
									schedule(15, flash_off())]",
		"hurt_velocity_x": 0,
		"hurt_velocity_y": 0,
		"is_invincible": "if(invincible or level.in_dialog or is_invincible_posthit, 1, 0)",
		"is_invincible_posthit": "if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)",
		"jump_power": "-1000 - 1d1500",
		"lower_difficulty": "level.player.difficulty < level.player.difficulty_challenging",
		"needs_to_recover": "(abs(level.cycle - vars.last_fired) < 120)",
		"past_shooting_interval": "(abs(level.cycle - vars.last_fired) > 60) and animation = 'hop'",
		"play_jump_sound": "def() if(should_play_sound, [sound('backflip-whirl-short.wav'),set(vars.last_played_sound,level.cycle)])
				where should_play_sound = [if(level.cycle - vars.last_played_sound > 100,1,0)]",
		"play_jump_sound_at_apex": "def() [if(sign(vars.prev_vel_y) = -1 and sign(velocity_y) = 1, play_jump_sound()),  set(vars.prev_vel_y, velocity_y)]",
		"player_is_facing_us": "(sign(to_player) = level.player.facing)",
		"shoot": "def() [set(vars.last_fired, level.cycle),
			add(velocity_x, -70*facing), add(velocity_y, -800),
			sound('fireball-soft'+1d5+'.wav'),
			spawn('hopper_armored.shot',mid_x+20*facing,mid_y,1,[set(velocity_x,xVel),set(velocity_y,yVel),set(rotate,angle_to(me,level.player))]),
			spawn('hopper_armored.shot_bloom',mid_x,mid_y,facing,[set(zorder,context.zorder+1)])
			] 
			where xVel = (shot_speed*cos(angle_to(me,level.player)))
			where yVel = (shot_speed*sin(angle_to(me,level.player)))",
		"shot_speed": 900,
		"should_hop": "(abs(vars.last_hopped -level.cycle) > 200 and (not should_walk) and (not should_turn) and (not being_stood_on))",
		"should_shoot": "(abs(velocity_y) < 40 and past_shooting_interval)",
		"should_turn": "sign(to_player) = facing",
		"should_turn_away_from_cliff": "(turns_at_cliffs and distance_to_cliff < distance_to_cliff_check)",
		"should_turn_towards_player": "(not facing_towards_player) and if(turns_towards_player and if(turns_towards_player_x_threshold,(turns_towards_player_x_threshold > x_distance_to_player),0), 1, 0)",
		"should_walk": "(abs(to_player) > 300 and sign(to_player) = -facing)",
		"standard_thrown_damage": 400,
		"team": "'evil'",
		"to_player": "mid_x-level.player.mid_x",
		"turn": "def() [facing(-facing),animation('turn')]",
		"turn_around": "def() if((should_turn_away_from_cliff) or (not turned_to_face_player_too_recently), [set(facing, -facing),animation('turn'), set(vars.last_turned,level.cycle)]) where turned_to_face_player_too_recently = abs(level.cycle - vars.last_turned) < turns_towards_player_delay",
		"turns_at_cliffs": 1,
		"turns_towards_player": "if(level.player.difficulty >= level.player.difficulty_challenging, 1, 0)",
		"turns_towards_player_delay": 200,
		"turns_towards_player_x_threshold": 250,
		"x_distance_to_player": "abs(mid_x - level.player.mid_x)",
		"y_distance_to_player": "abs(mid_y - level.player.mid_y)"
	},
	"solid_area": [5,7,28,23],
	"solid_dimensions": ["enemy","common"],
	"tags": "swallowable",
	"timer_frequency": 2,
	"tmp": null,
	"traction": 1000,
	"variations": null,
	"vars": {
		"charge_time": 6,
		"charge_up": 0,
		"cool_off": 0,
		"last_played_sound": 0,
		"last_turned": 0,
		"points_value": 13,
		"prev_vel_y": 0
	}
}