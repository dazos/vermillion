{
	"activation_border": 500,
	"animation": [
		{
			"accel_x": 8,
			"attack_area": [25,30,45,45],
			"body_area": "all",
			"duration": 4,
			"events": "18:20:22:flap,0:2:4:antiflap",
			"feet_x": 35,
			"feet_y": 50,
			"frame_info": [11,5,10,8,0,822,48,42,4,12,6,8,48,822,59,35,4,11,5,8,107,822,60,36,15,9,16,2,167,822,38,44,12,9,12,12,205,822,45,34,2,10,2,11,250,822,65,34,4,9,3,9,315,822,62,37],
			"frames": 7,
			"frames_per_row": 1,
			"id": "fly",
			"image": "compiled-1.png",
			"rect": [-11,817,57,871]
		},
		{
			"attack_area": [25,30,45,45],
			"body_area": "all",
			"duration": 5,
			"feet_x": 35,
			"feet_y": 50,
			"frame_info": [9,5,9,8,900,446,51,42],
			"frames": 1,
			"id": "turn",
			"image": "compiled-0.png",
			"rect": [891,441,959,495]
		},
		{
			"attack_area": [25,30,45,45],
			"body_area": "all",
			"duration": 18,
			"feet_x": 35,
			"feet_y": 50,
			"frame_info": [7,9,7,8,338,117,55,38],
			"frames": 1,
			"id": "hurt",
			"image": "compiled-2.png",
			"rect": [331,108,399,162]
		}
	],
	"consts": {
		"basic_type": "owl",
		"frogourmet_tag": "owl",
		"size": 48
	},
	"editor_info": {
		"category": "enemies, forest",
		"var": [
			{
				"name": "x_bound",
				"type": "x",
				"value": "x - 200"
			},
			{
				"name": "x2_bound",
				"type": "x",
				"value": "x2 + 200"
			},
			{
				"name": "y_bound",
				"type": "y",
				"value": "midpoint_y  - 200"
			},
			{
				"name": "y2_bound",
				"type": "y",
				"value": "midpoint_y  + 200"
			}
		]
	},
	"friction": 1000,
	"has_feet": false,
	"hitpoints": 1200,
	"id": "owl",
	"mass": 5,
	"on_add_object_fail": "[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]",
	"on_antiflap": "add(velocity_y, 50)",
	"on_change_animation_failure": "fire_event('solidity_fail')",
	"on_change_solid_dimensions_fail": "fire_event('solidity_fail')",
	"on_collide_object_body": "if(collide_with.team != team and collide_with.team != 'evil_harmless' and (not (collide_with.team = 'evil' and team = 'evil_harmless')), if(collide_with_area in ['attack','thrown'], get_hit_by(collide_with)))",
	"on_create": "[set(activation_border,acti_border),set(vars.y_speed, _y_speed), set(accel_y, _y_speed)] where _y_speed = (8 +1d5)*if(1d2=2,1,-1)",
	"on_end_anim": "	[if(mid_x > x2_bound and facing = 1, turn()),
				if(mid_x < x_bound and facing = -1, turn()),
				if( not (mid_x > x2_bound and facing = 1) or (mid_x < x_bound and facing = -1), animation('fly'))]",
	"on_flap": "add(velocity_y, -50)",
	"on_outside_level": "[if(y > level.dimensions[3], add(hitpoints,-1))]",
	"on_process_fly": "[
				if(mid_y > y2_bound and accel_y > 0, turn_vert()),
				if(mid_y < y_bound and accel_y < 0, turn_vert())
				]",
	"on_solidity_fail": "if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me),
			   set(tmp.in_solidity_fail, 0)
			  ])",
	"on_start_level": "set(activation_border,acti_border)",
	"platform_area": [23,16,45,41],
	"properties": {
		"acti_border": "max(abs(x_bound+x2_bound),abs(y_bound+y2_bound))*1.5",
		"attack_damage": 2,
		"attack_knockback": 0,
		"cause_flinch": "def(collide_with) execute(me, [
			add(me.velocity_x,me.hurt_velocity_x * sign(collide_with.midpoint_x - me.midpoint_x)), 
			add(me.velocity_y,me.hurt_velocity_y),
			cause_hurt_anim(collide_with)
			])",
		"cause_hurt_anim": "def(collide_with) execute(me, if('hurt' in available_animations,set(me.animation, 'hurt')))",
		"damage_cooldown": 0,
		"display_hurt_visuals": "def() execute(me, 
					[
					hurt_flash_sequence()
					])",
		"display_posthit_invincibility_flash_sequence": "def() if(consts.posthit_invicibility_period, 
			map(range(consts.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(alpha,50),set(alpha,255))  ) ) )",
		"flash_bright": "def() [set(me.brightness, 1023)]",
		"flash_off": "def() [set(me.brightness, 255),set(me.red, 255),set(me.green, 255), set(me.blue, 255)]",
		"flash_red": "def() [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]",
		"flinch_threshold": 3,
		"get_hit_by": "def(collide_with) execute(me, [
						handle_special_damage_response(collide_with),
	
						if((not is_invincible) and (collide_with.attack_damage > 0) and collide_with.hitpoints > 0 and (collide_with.attack_damage >= armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[display_hurt_visuals(),
								display_posthit_invincibility_flash_sequence(),
								handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])",
		"handle_damage": "def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))",
		"handle_damage_type": "def(collide_with) null #virtual#",
		"handle_flinch": "def(collide_with) 
			execute(me, if(collide_with.attack_damage >= flinch_threshold, cause_flinch(collide_with)))",
		"handle_knockback": "def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))",
		"handle_special_damage_response": "def(collide_with) null #virtual#",
		"higher_difficulty": "level.player.difficulty > level.player.difficulty_casual",
		"hittable_attack_damage": 0,
		"hurt_flash_sequence": "def()	[	flash_bright(),
									schedule(3, flash_red()),
									schedule(6, flash_bright()),
									schedule(9, flash_red()),
									schedule(12, flash_bright()),
									schedule(15, flash_off())]",
		"hurt_velocity_x": -200,
		"hurt_velocity_y": -400,
		"is_invincible": "if(invincible or level.in_dialog or is_invincible_posthit, 1, 0)",
		"is_invincible_posthit": "if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)",
		"lower_difficulty": "level.player.difficulty < level.player.difficulty_challenging",
		"standard_thrown_damage": 400,
		"team": "'evil'",
		"turn": "def() [animation('turn'),facing(-facing)]",
		"turn_vert": "def() if(accel_y > 0, set(accel_y, -vars.y_speed), set(accel_y, vars.y_speed))"
	},
	"tmp": null,
	"traction": 1000,
	"traction_in_air": 1000,
	"variations": null,
	"vars": {
		"next_anim": "fly",
		"x2_bound": null,
		"x_bound": null,
		"y2_bound": null,
		"y_bound": null
	}
}