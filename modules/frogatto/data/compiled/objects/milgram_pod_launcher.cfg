{
	"animation": [
		{
			"accel_y": 80,
			"body_area": "all",
			"duration": 4,
			"events": "12:puff",
			"frame_info": [9,10,4,1,900,488,36,42,9,12,3,1,936,488,37,40,9,14,2,1,973,488,38,38],
			"frames": 3,
			"id": "normal",
			"image": "compiled-0.png",
			"rect": [891,478,939,530],
			"reverse": true
		},
		{
			"accel_y": 80,
			"body_area": "all",
			"duration": 4,
			"frame_info": [9,10,4,1,900,488,36,42,9,12,3,1,936,488,37,40,9,14,2,1,973,488,38,38],
			"frames": 3,
			"id": "spring",
			"image": "compiled-0.png",
			"rect": [891,478,939,530],
			"reverse": true
		},
		{
			"accel_y": 80,
			"body_area": "all",
			"duration": 5,
			"frame_info": [9,9,4,1,752,822,36,43,9,9,3,1,788,822,37,43,9,9,2,1,825,822,38,43,9,9,3,1,863,822,37,43],
			"frames": 4,
			"id": "prepfire",
			"image": "compiled-1.png",
			"rect": [743,813,791,865]
		},
		{
			"accel_y": 80,
			"body_area": "all",
			"duration": 5,
			"events": "1:shoot",
			"frame_info": [9,4,3,1,850,274,37,48,8,2,1,1,887,274,40,50,7,1,2,1,927,274,40,51,8,0,2,1,967,274,39,52],
			"frames": 4,
			"id": "fire",
			"image": "compiled-1.png",
			"rect": [841,270,889,322]
		},
		{
			"accel_y": 80,
			"body_area": "all",
			"duration": 18,
			"frame_info": [9,9,4,1,946,730,36,43],
			"frames": 1,
			"id": "hurt",
			"image": "compiled-1.png",
			"rect": [937,721,985,773]
		}
	],
	"consts": {
		"basic_type": "milgram_pod_launcher",
		"frogourmet_tag": "milgram_pod_launcher"
	},
	"editor_force_standing": true,
	"editor_info": {
		"category": "enemies, milgramen",
		"var": [
			{
				"name": "max_objects",
				"value": 3
			},
			{
				"name": "loading_time",
				"value": 1
			},
			{
				"name": "zone_x1",
				"type": "x",
				"value": "x - 300"
			},
			{
				"name": "zone_x2",
				"type": "x",
				"value": "x + 400"
			},
			{
				"name": "zone_y1",
				"type": "y",
				"value": "y - 400"
			},
			{
				"name": "zone_y2",
				"type": "y",
				"value": "y + 500"
			}
		]
	},
	"feet_width": 4,
	"friction": 1000,
	"hitpoints": 400,
	"id": "milgram_pod_launcher",
	"mass": 5,
	"on_add_object_fail": "[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]",
	"on_bounced_on": "[if(jumped_on_by.mass >= 1000, die(), animation('spring'))]",
	"on_change_animation_failure": "fire_event('solidity_fail')",
	"on_change_solid_dimensions_fail": "fire_event('solidity_fail')",
	"on_child_spawned": "if(child.type in ['milgram_pod.thrown'],set(vars.spawned_objects, vars.spawned_objects + [child]))",
	"on_collide_object_body": "if(collide_with.team != team and collide_with.team != 'evil_harmless' and (not (collide_with.team = 'evil' and team = 'evil_harmless')), if(collide_with_area in ['attack','thrown'], get_hit_by(collide_with)))",
	"on_create": "add_particles('steam')",
	"on_die": "spawn('explosion_big_recurring',  midpoint_x, midpoint_y, facing)",
	"on_end_anim": "[if(animation = 'normal',
	                   if(vars.load >= vars.loading_time,
					     [if(size(vars.spawned_objects) < vars.max_objects,animation('prepfire'),animation('normal')), set_var('load', 0)],
						 [animation('normal'), set_var('load', vars.load + 1)]),),
						 
					set(vars.spawned_objects, filter(vars.spawned_objects, 'ant', ant.hitpoints > 0 and ant.x > context.vars.zone_x1 and ant.x2 < context.vars.zone_x2 and ant.y >  context.vars.zone_y1 and ant.y2 < context.vars.zone_y2))]",
	"on_end_fire_anim": "animation('normal')",
	"on_end_hurt_anim": "animation('normal')",
	"on_end_prepfire_anim": "animation('fire')",
	"on_enter_anim": "set(tmp, 'already_hit', [])",
	"on_outside_level": "[if(y > level.dimensions[3], add(hitpoints,-1))]",
	"on_shoot": "[spawn('milgram_pod.thrown', midpoint_x+ facing*50, midpoint_y -50, facing, [set(velocity_x,1000*facing),set(velocity_y,-1000),set(animation,'thrown')]),sound('FlowerShot.ogg')]",
	"on_solidity_fail": "if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me),
			   set(tmp.in_solidity_fail, 0)
			  ])",
	"on_stationary_vulnerable_PROTO_die": "[score(level,points_value), spawn_item(self), death_burst_tracked(self)]",
	"on_surface_damage": "die()",
	"particle_system": {
		"accel_y": -40,
		"animation": {
			"accel_y": -2,
			"duration": 15,
			"frame_info": [3,3,3,3,813,117,3,3,1,2,1,1,816,117,7,6,0,1,0,0,823,117,9,8,0,1,0,0,832,117,9,8,0,1,0,0,841,117,9,8],
			"frames": 5,
			"id": "normal",
			"image": "compiled-0.png",
			"rect": [810,114,818,122]
		},
		"delta_a": 1,
		"id": "steam",
		"max_x": 30,
		"max_y": 15,
		"min_x": 25,
		"min_y": 5,
		"spawn_rate": 200,
		"time_to_live": 75,
		"type": "simple",
		"velocity_x": -200,
		"velocity_x_random": 400,
		"velocity_y": -200,
		"velocity_y_random": 400
	},
	"properties": {
		"armor": 40,
		"attack_damage": 0,
		"attack_knockback": 0,
		"cause_flinch": "def(collide_with) execute(me, [
			add(me.velocity_x,me.hurt_velocity_x * sign(collide_with.midpoint_x - me.midpoint_x)), 
			add(me.velocity_y,me.hurt_velocity_y),
			cause_hurt_anim(collide_with)
			])",
		"cause_hurt_anim": "def(collide_with) execute(me, if('hurt' in available_animations,set(me.animation, 'hurt')))",
		"damage_cooldown": 0,
		"display_hurt_visuals": "def() execute(me, 
					[
					hurt_flash_sequence()
					])",
		"display_posthit_invincibility_flash_sequence": "def() if(consts.posthit_invicibility_period, 
			map(range(consts.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(alpha,50),set(alpha,255))  ) ) )",
		"flash_bright": "def() [set(me.brightness, 1023)]",
		"flash_off": "def() [set(me.brightness, 255),set(me.red, 255),set(me.green, 255), set(me.blue, 255)]",
		"flash_red": "def() [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]",
		"flinch_threshold": 3,
		"get_hit_by": "def(collide_with) execute(me, [
						handle_special_damage_response(collide_with),
	
						if((not is_invincible) and (collide_with.attack_damage > 0) and collide_with.hitpoints > 0 and (collide_with.attack_damage >= armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[display_hurt_visuals(),
								display_posthit_invincibility_flash_sequence(),
								handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])",
		"handle_damage": "def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))",
		"handle_damage_type": "def(collide_with) null #virtual#",
		"handle_flinch": "def(collide_with) 
			execute(me, if(collide_with.attack_damage >= flinch_threshold, cause_flinch(collide_with)))",
		"handle_knockback": "def(collide_with) null",
		"handle_special_damage_response": "def(collide_with) null #virtual#",
		"higher_difficulty": "level.player.difficulty > level.player.difficulty_casual",
		"hittable_hurt_velocity_x": -200,
		"hittable_hurt_velocity_y": -400,
		"hurt_flash_sequence": "def()	[	flash_bright(),
									schedule(3, flash_red()),
									schedule(6, flash_bright()),
									schedule(9, flash_red()),
									schedule(12, flash_bright()),
									schedule(15, flash_off())]",
		"hurt_velocity_x": 0,
		"hurt_velocity_y": 0,
		"is_invincible": "if(invincible or level.in_dialog or is_invincible_posthit, 1, 0)",
		"is_invincible_posthit": "if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)",
		"lower_difficulty": "level.player.difficulty < level.player.difficulty_challenging",
		"shouldfire": "if(size(vars.spawned_objects) < vars.max_objects,1,0)",
		"standard_thrown_damage": 400,
		"stationary_vulnerable_handle_knockback": "def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))",
		"team": "'evil'"
	},
	"solid_area": [14,20,34,50],
	"springiness": 100,
	"timer_frequency": 2,
	"tmp": null,
	"traction": 1000,
	"traction_in_air": 1000,
	"variations": null,
	"vars": {
		"damage": 1,
		"load": 0,
		"loading_time": null,
		"max_objects": 3,
		"points_value": 17,
		"spawned_objects": [],
		"zone_x1": null,
		"zone_x2": null,
		"zone_y1": null,
		"zone_y2": null
	},
	"zorder": 0
}