{
	"animation": [
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duplicates": 6,
			"duration": 6,
			"frame_info": [2,3,4,0,866,228,36,35,2,4,4,0,902,228,36,34,2,5,4,0,938,228,36,33],
			"frames": 3,
			"id": "stand",
			"image": "compiled-2.png",
			"rect": [864,225,905,262],
			"reverse": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duplicates": 6,
			"duration": 6,
			"frame_info": [2,3,4,0,866,228,36,35,2,4,4,0,902,228,36,34,2,5,4,0,938,228,36,33],
			"frames": 3,
			"id": "emote_geez",
			"image": "compiled-2.png",
			"rect": [864,225,905,262],
			"reverse": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duplicates": 6,
			"duration": 6,
			"frame_info": [2,3,4,0,866,228,36,35,2,4,4,0,902,228,36,34,2,5,4,0,938,228,36,33],
			"frames": 3,
			"id": "emote_oh",
			"image": "compiled-2.png",
			"rect": [864,225,905,262],
			"reverse": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duplicates": 6,
			"duration": 6,
			"frame_info": [2,3,4,0,866,228,36,35,2,4,4,0,902,228,36,34,2,5,4,0,938,228,36,33],
			"frames": 3,
			"id": "emote_impatient",
			"image": "compiled-2.png",
			"rect": [864,225,905,262],
			"reverse": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duplicates": 6,
			"duration": 6,
			"frame_info": [2,3,4,0,866,228,36,35,2,4,4,0,902,228,36,34,2,5,4,0,938,228,36,33],
			"frames": 3,
			"id": "emote_raisedfinger",
			"image": "compiled-2.png",
			"rect": [864,225,905,262],
			"reverse": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duplicates": 6,
			"duration": 6,
			"frame_info": [2,3,4,0,866,228,36,35,2,4,4,0,902,228,36,34,2,5,4,0,938,228,36,33],
			"frames": 3,
			"id": "emote_confused",
			"image": "compiled-2.png",
			"rect": [864,225,905,262],
			"reverse": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duplicates": 6,
			"duration": 6,
			"frame_info": [2,3,4,0,866,228,36,35,2,4,4,0,902,228,36,34,2,5,4,0,938,228,36,33],
			"frames": 3,
			"id": "emote_talk",
			"image": "compiled-2.png",
			"rect": [864,225,905,262],
			"reverse": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duplicates": 6,
			"duration": 6,
			"frame_info": [2,3,4,0,866,228,36,35,2,4,4,0,902,228,36,34,2,5,4,0,938,228,36,33],
			"frames": 3,
			"id": "emote_nod",
			"image": "compiled-2.png",
			"rect": [864,225,905,262],
			"reverse": true
		},
		{
			"accel_x": 1600,
			"accel_y": 80,
			"body_area": "all",
			"duration": 5,
			"frame_info": [5,9,10,1,572,264,36,35,3,10,10,1,608,264,38,34,6,9,10,1,646,264,35,35],
			"frames": 3,
			"id": "walk",
			"image": "compiled-2.png",
			"rect": [567,255,617,299],
			"reverse": true,
			"solid_area": [15,10,29,42]
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 6,
			"frame_info": [2,3,4,0,464,264,36,35,2,3,4,0,500,264,36,35,2,4,4,0,536,264,36,34],
			"frames": 3,
			"id": "stand",
			"image": "compiled-2.png",
			"rect": [462,261,503,298],
			"reverse": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duplicates": 6,
			"duration": 6,
			"frame_info": [2,3,4,0,866,228,36,35,2,4,4,0,902,228,36,34,2,5,4,0,938,228,36,33],
			"frames": 3,
			"id": "stand_up_slope",
			"image": "compiled-2.png",
			"rect": [864,225,905,262],
			"reverse": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duplicates": 6,
			"duration": 6,
			"frame_info": [2,3,4,0,866,228,36,35,2,4,4,0,902,228,36,34,2,5,4,0,938,228,36,33],
			"frames": 3,
			"id": "stand_down_slope",
			"image": "compiled-2.png",
			"rect": [864,225,905,262],
			"reverse": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 3,
			"frame_info": [3,1,4,0,914,987,35,37],
			"frames": 1,
			"id": "lookup",
			"image": "compiled-1.png",
			"rect": [911,986,952,1023],
			"reverse": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 3,
			"frame_info": [3,1,4,0,914,987,35,37],
			"frames": 1,
			"id": "enter_lookup",
			"image": "compiled-1.png",
			"rect": [911,986,952,1023],
			"reverse": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 1,
			"frame_info": [4,11,5,0,778,631,41,27],
			"frames": 1,
			"id": "crouch",
			"image": "compiled-2.png",
			"rect": [774,620,823,657],
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 3,
			"frame_info": [4,11,5,0,778,631,41,27],
			"frames": 1,
			"id": "enter_crouch",
			"image": "compiled-2.png",
			"rect": [774,620,823,657],
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 3,
			"frame_info": [4,11,5,0,778,631,41,27],
			"frames": 1,
			"id": "leave_crouch",
			"image": "compiled-2.png",
			"play_backwards": true,
			"rect": [774,620,823,657],
			"rotate_on_slope": true
		},
		{
			"accel_x": 1000,
			"accel_y": 80,
			"body_area": "all",
			"duration": 3,
			"frame_info": [0,0,0,7,629,265,32,26,0,0,24,0,661,265,8,33,32,33,0,0,669,265,0,0,32,33,0,0,669,265,0,0,32,33,0,0,669,265,0,0,32,33,0,0,669,265,0,0,32,33,0,0,669,265,0,0,32,33,0,0,669,265,0,0,32,33,0,0,669,265,0,0,32,33,0,0,669,265,0,0,32,33,0,0,669,265,0,0],
			"frames": 11,
			"id": "roll",
			"image": "compiled-0.png",
			"rect": [629,265,660,297],
			"scale": 2,
			"sound": "roll.ogg",
			"velocity_x": 500
		},
		{
			"accel_x": -1600,
			"accel_y": 80,
			"body_area": "all",
			"duration": 5,
			"frame_info": [5,9,10,1,572,264,36,35,3,10,10,1,608,264,38,34,6,9,10,1,646,264,35,35],
			"frames": 3,
			"id": "walk_back",
			"image": "compiled-2.png",
			"rect": [567,255,617,299],
			"reverse": false,
			"solid_area": [15,10,29,42]
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 10,
			"frame_info": [9,7,10,0,422,299,30,34],
			"frames": 1,
			"id": "skid",
			"image": "compiled-2.png",
			"rect": [413,292,461,332]
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 5,
			"frame_info": [9,3,7,0,837,264,26,35],
			"frames": 1,
			"id": "turn",
			"image": "compiled-2.png",
			"rect": [828,261,869,298]
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 6,
			"frame_info": [4,7,8,4,0,908,35,31,7,2,9,0,35,908,31,40,5,3,7,3,66,908,35,36,2,4,7,3,101,908,38,35],
			"frames": 4,
			"id": "jump",
			"image": "compiled-1.png",
			"rect": [-4,901,42,942],
			"sound": "FrogJump1.ogg,FrogJump2.ogg"
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 4,
			"frame_info": [6,5,8,9,160,117,33,38,6,6,8,9,193,117,33,37,4,7,6,9,226,117,37,36],
			"frames": 3,
			"id": "begin_glide",
			"image": "compiled-2.png",
			"rect": [154,112,200,163]
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 2,
			"frame_info": [3,6,6,9,0,155,38,37,3,6,6,9,38,155,38,37,4,6,6,9,76,155,37,37,3,6,6,9,113,155,38,37,3,6,6,9,151,155,38,37,3,6,6,9,189,155,38,37,4,6,6,9,227,155,37,37,3,6,6,9,264,155,38,37],
			"frames": 8,
			"id": "glide",
			"image": "compiled-2.png",
			"rect": [-3,149,43,200]
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 12,
			"frame_info": [6,7,9,3,159,334,32,32],
			"frames": 1,
			"id": "fall",
			"image": "compiled-2.png",
			"rect": [153,327,199,368]
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": [6,11,24,36],
			"duration": 3,
			"events": "3:side_attack_fx_one,6:side_attack_fx_two,9:side_attack_fx_three,8:side_attack_contact",
			"frame_info": [0,0,1,0,192,987,48,37,0,0,0,0,240,987,49,37,0,0,0,18,289,987,49,19,0,0,0,18,338,987,49,19,0,0,0,18,387,987,49,19,0,0,0,18,436,987,49,19,0,0,0,18,485,987,49,19,0,0,15,18,534,987,34,19],
			"frames": 8,
			"grab_area": [32,24,49,34],
			"id": "attack",
			"image": "compiled-1.png",
			"rect": [192,987,240,1023],
			"reverse": false,
			"sound": "punch.ogg"
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"attack_area": [16,0,28,10],
			"body_area": "all",
			"duration": 2,
			"events": "6:up_attack_contact",
			"frame_info": [41,44,0,0,1023,78,0,0,41,44,0,0,1023,78,0,0,41,44,0,0,1023,78,0,0,41,44,0,0,1023,78,0,0,41,44,0,0,1023,78,0,0,41,44,0,0,1023,78,0,0],
			"frames": 6,
			"id": "up_attack",
			"image": "compiled-0.png",
			"rect": [982,34,1022,77],
			"reverse": false,
			"sound": "punch.ogg"
		},
		{
			"accel_x": 3200,
			"accel_y": 80,
			"attack_area": [20,14,70,40],
			"body_area": "all",
			"duration": 3,
			"events": "6:7:8:9:10:11:run_attack_contact",
			"frame_info": [68,29,0,0,1023,78,0,0,68,29,0,0,1023,78,0,0,68,29,0,0,1023,78,0,0,68,29,0,0,1023,78,0,0,68,29,0,0,1023,78,0,0],
			"frames": 5,
			"id": "run_attack",
			"image": "compiled-0.png",
			"rect": [955,49,1022,77],
			"reverse": false,
			"sound": "slash.ogg"
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": [6,11,24,36],
			"duration": 2,
			"events": "3:side_attack_fx_one,6:side_attack_fx_two,9:side_attack_fx_three,8:side_attack_contact",
			"frame_info": [0,0,1,4,535,265,48,33,0,0,3,4,583,265,46,33,49,37,0,0,629,265,0,0,49,37,0,0,629,265,0,0,49,37,0,0,629,265,0,0,49,37,0,0,629,265,0,0,49,37,0,0,629,265,0,0,49,37,0,0,629,265,0,0,49,37,0,0,629,265,0,0],
			"frames": 9,
			"grab_area": [28,19,43,31],
			"id": "jump_attack",
			"image": "compiled-0.png",
			"rect": [535,265,583,301],
			"reverse": false,
			"sound": "kick.ogg"
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 18,
			"events": "1:6:12:18:hurtflicker",
			"frame_info": [1,2,4,0,710,155,37,36],
			"frames": 1,
			"id": "hurt",
			"image": "compiled-2.png",
			"rect": [709,153,750,190],
			"sound": "TakeDamage.wav",
			"velocity_x": -1000,
			"velocity_y": -1000
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"collide_h": 16,
			"collide_w": 15,
			"collide_x": 10,
			"collide_y": 6,
			"duration": 4,
			"events": "15:interacting",
			"feet_x": 16,
			"feet_y": 32,
			"frames": 4,
			"h": 32,
			"id": "interact",
			"image": "characters/frogatto-spritesheet1.png",
			"pad": 3,
			"scale": 2,
			"w": 32,
			"x": 72,
			"y": 161
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 5,
			"frame_info": [13,14,13,6,784,488,21,28,12,14,13,6,805,488,22,28,13,15,12,5,827,488,22,28,11,14,11,5,849,488,25,29,11,14,11,6,874,488,25,28,13,15,12,6,899,488,22,27],
			"frames": 6,
			"frames_per_row": 2,
			"id": "push",
			"image": "compiled-2.png",
			"rect": [771,474,817,521]
		},
		{
			"accel_x": 0,
			"accel_y": 0,
			"body_area": "all",
			"duration": 6,
			"frame_info": [4,5,4,5,600,686,31,26,4,5,4,5,631,686,31,26,4,5,4,5,662,686,31,26,4,5,4,5,693,686,31,26,4,5,4,5,724,686,31,26,4,5,4,5,755,686,31,26],
			"frames": 6,
			"frames_per_row": 3,
			"id": "swim_side_idle",
			"image": "compiled-2.png",
			"rect": [596,681,634,716],
			"reverse": true
		},
		{
			"accel_x": 0,
			"accel_y": 0,
			"body_area": "all",
			"duration": 6,
			"frame_info": [3,4,3,5,140,659,33,27,3,5,3,5,173,659,33,26,3,4,3,5,206,659,33,27,3,4,3,5,239,659,33,27,3,5,3,5,272,659,33,26,3,4,3,5,305,659,33,27],
			"frames": 6,
			"frames_per_row": 3,
			"id": "swim_down_idle",
			"image": "compiled-2.png",
			"rect": [137,655,175,690],
			"reverse": true
		},
		{
			"accel_x": 0,
			"accel_y": 0,
			"body_area": "all",
			"duration": 6,
			"frame_info": [7,1,6,2,718,265,26,33,7,1,6,3,744,265,26,32,7,1,6,2,770,265,26,33,7,1,6,2,796,265,26,33,7,1,6,3,822,265,26,32,7,1,6,2,848,265,26,33],
			"frames": 6,
			"frames_per_row": 3,
			"id": "swim_up_idle",
			"image": "compiled-0.png",
			"rect": [711,264,749,299],
			"reverse": true
		},
		{
			"accel_x": 0,
			"accel_y": 5,
			"body_area": "all",
			"duration": 6,
			"frame_info": [5,5,4,6,0,792,30,25,5,5,4,6,30,792,30,25,4,5,2,7,60,792,33,24],
			"frames": 3,
			"id": "swim_side",
			"image": "compiled-2.png",
			"rect": [-5,787,33,822],
			"sound": "Paddle4.ogg,Paddle5.ogg,Paddle6.ogg,Paddle7.ogg"
		},
		{
			"accel_x": 0,
			"accel_y": 0,
			"body_area": "all",
			"duration": 6,
			"frame_info": [11,8,11,2,819,631,17,26,6,7,6,8,836,631,27,21,7,1,5,8,863,631,27,27],
			"frames": 3,
			"id": "swim_down",
			"image": "compiled-2.png",
			"rect": [808,623,846,658],
			"sound": "Paddle4.ogg,Paddle5.ogg,Paddle6.ogg,Paddle7.ogg"
		},
		{
			"accel_x": 0,
			"accel_y": 0,
			"body_area": "all",
			"duration": 6,
			"frame_info": [8,2,7,8,733,366,24,26,6,2,6,4,757,366,27,30,9,2,7,3,784,366,23,31],
			"frames": 3,
			"id": "swim_up",
			"image": "compiled-2.png",
			"rect": [725,364,763,399],
			"sound": "Paddle4.ogg,Paddle5.ogg,Paddle6.ogg,Paddle7.ogg"
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 6,
			"frames": 14,
			"frames_per_row": 7,
			"id": "emote_confused",
			"image": "characters/frogatto-spritesheet3.png",
			"pad": 3,
			"rect": [1,40,32,72]
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 6,
			"frames": 16,
			"frames_per_row": 4,
			"id": "emote_impatient",
			"image": "characters/frogatto-spritesheet3.png",
			"pad": 3,
			"rect": [286,1,317,33]
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 6,
			"frames": 14,
			"frames_per_row": 7,
			"id": "emote_raisedfinger",
			"image": "characters/frogatto-spritesheet3.png",
			"pad": 3,
			"rect": [1,116,32,148]
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 6,
			"frames": 16,
			"frames_per_row": 8,
			"id": "emote_talk",
			"image": "characters/frogatto-spritesheet3.png",
			"pad": 3,
			"rect": [1,189,32,221]
		}
	],
	"consts": {
		"posthit_invicibility_period": 100,
		"tank_gain": 2,
		"tank_loss": 250,
		"tank_size": 1000
	},
	"editor_info": {
		"category": "player"
	},
	"feet_width": 1,
	"friction": 2000,
	"functions": ["#Function to do a water-equivalent of standing.#
	  def float(object_type obj)
		animation('swim_side_idle')","
	  #function which returns true if the object is in an animation that
	   requires Nene be on the ground#	
	  def animation_requires_standing(obj)
	    obj.animation in ['stand', 'stand_up_slope', 'stand_down_slope', 'walk', 'lookup', 'crouch', 'enter_crouch', 'leave_crouch', 'turn', 'skid'];
	  def set_facing(object_type obj, facing) if(obj.facing != facing and (not (obj.animation in ['interact'])),
	           [facing(facing), if(obj.is_standing, animation('turn'))]);

	  def stand(obj)
	   if(abs(obj.velocity_x) > 240 and (not obj.animation in ['walk']), animation('skid'),
	     if(abs(obj.slope_standing_on) < 20, animation('stand'),
		   if(obj.slope_standing_on*obj.facing > 0, animation('stand_down_slope'),
			                                animation('stand_up_slope'))));


	  #make Nene walk. anim can be either 'walk'. Does checking
	   to make sure Nene is in a state where she can walk.
	   Will make Nene 'glide' if in mid air.#
	  def walk(object_type obj, dir, anim)
	    if(obj.is_standing and (not (obj.animation in ['walk', 'walk_back', 'jump', 'turn', 'crouch', 'enter_crouch', 'interact'])),
		   [animation(anim)],
	       #Nene is in the air, so make her glide.#
		   if(not obj.is_standing, set(obj.velocity_x, obj.velocity_x + obj.jump_glide*dir)));

	  #Function to attempt to make Nene crouch; does checking to make
	   sure she's in a state that allows entering a crouch.#
	  def crouch(obj)
	  	if(((not obj.animation in ['crouch', 'enter_crouch', 'interact'] ) and obj.is_standing), animation('enter_crouch'));
	  
	  #Function to make Nene attack. Does checking and chooses the
	   appropriate type of attack animation, if any.#
	  def attack(object_type obj, charge_cycles)
		[];

	  #Function to enter swimming frames.#
	  def swim(obj,dirx,diry)
	    if(dirx or diry,
	    [if(obj.underwater and (not (obj.animation in ['swim_side','swim_down','swim_up'])), [if(dirx,animation('swim_side')),if(diry < 0,animation('swim_up')),if(diry > 0,animation('swim_down'))]), if(obj.underwater,
		[set(velocity_x, obj.velocity_x + obj.swim_accel*dirx),
		 set(velocity_y, obj.velocity_y + obj.swim_accel*diry)
		])]);
	   
		   

	  # Stolen from old can_slide, not sure if this is wanted.#
	  def can_bounce(obj)
        solid(obj.level, if(obj.facing > 0, obj.solid_rect.x2+1, obj.solid_rect.x-1), obj.solid_rect.y) and
        solid(obj.level, if(obj.facing > 0, obj.solid_rect.x2+1, obj.solid_rect.x-1), obj.solid_rect.y2) and
		obj.velocity_y < 300 and
		abs(obj.velocity_x) > 200;

	   def swallowing_object(object_type frog)
	     if(frog.attached_objects, map(frog.attached_objects, 'obj',
	      if(abs(obj.midpoint_x - context.frog.midpoint_x) < 4, set(attached_objects, []), set(obj.midpoint_x, obj.midpoint_x + if(obj.midpoint_x > context.frog.midpoint_x, -4, 4)))
		  ));

	  1"],
	"hitpoints": 4,
	"id": "nene_playable",
	"is_human": true,
	"mass": 6,
	"on_add_object_fail": "[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]",
	"on_change_animation_failure": "fire_event('solidity_fail')",
	"on_change_solid_dimensions_fail": "if(not is_invincible_posthit,
	                    [add(hitpoints, -1), set(vars.time_last_hit, cycle)])",
	"on_collide": "[if((animation in ['jump', 'fall', 'glide', 'begin_glide']) and can_bounce(self), [set(velocity_x, -velocity_x), set_facing(self, -facing)], set(velocity_x, 0))]",
	"on_collide_damage": "if((not is_invincible(self)), [add(hitpoints, -max(1, surface_damage)), animation('hurt'), set(tmp.time_last_hit, cycle)])",
	"on_collide_feet": "if(collide_with and collide_with.consts.springiness > 0, [set(velocity_y, -((velocity_y*collide_with.consts.springiness)/100 + collide_with.consts.spring_amount)), fire_event(collide_with, 'bounced_on')],
	    [set(velocity_x, velocity_x - velocity_x/4), stand(self)])",
	"on_collide_head": "[if(animation = 'jump', animation('fall')), if(velocity_y < 0, set(velocity_y, 0))]",
	"on_collide_object_body": "if(collide_with.team != team and collide_with.team != 'evil_harmless' and (not (collide_with.team = 'evil' and team = 'evil_harmless')), if(collide_with_area in ['attack','thrown'], get_hit_by(collide_with)))",
	"on_collide_object_grab": "if(collide_with_area = 'body',
	                        [remove_object(collide_with), set(attached_objects, [collide_with]), set(tmp.swallowed, collide_with), set(variations, 'fat')])",
	"on_create": "[animation('stand')]",
	"on_ctrl_jump": "if(is_standing and (not (animation in ['interact', 'fall', 'jump'])), [
    animation('jump'),
    if(not ctrl_down or underwater, [ set(jumpCloud.parent, self.standing_on),
    add_object(jumpCloud),
    ] where jumpCloud = object('dust_cloud_jump', midpoint_x, y2 - 22, facing)),
    set(velocity_x, velocity_x + velocity_x/2),
    if(ctrl_down and is_standing_on_platform,
        [set(fall_through_platforms, 10),
        set(velocity_y, velocity_y + jump_power/10)],
        [set(velocity_y, -jump_power),
        add(velocity_x, velocity_x/2)])])",
	"on_ctrl_tongue": "
	if(not underwater,
		if(mana.get-consts.tank_loss >= 0,
			[
			if(not animation in ['crouch', 'enter_crouch', 'leave_crouch'],
				if(not animation in ['lookup', 'enter_lookup'],
					[
						spawn('blue_ball',midpoint_x+(50*facing),midpoint_y+20,1,[set(velocity_x, 1000*facing+velocity_x), set(velocity_y, velocity_y)]),
						//mana.set(mana.get - consts.tank_loss),
						set(velocity_x, velocity_x - 1000*facing)],
					[
						spawn('blue_ball',midpoint_x+(40*facing),midpoint_y-20,1,[set(velocity_x, 800*facing+velocity_x), set(velocity_y, -1600+velocity_y)]),
						//mana.set(mana.get - consts.tank_loss),
						set(velocity_x, velocity_x - 800*facing),
						set(velocity_y, velocity_y + 1600)]),
				[
					spawn('blue_ball',midpoint_x+(50*facing),midpoint_y+25,1,[set(velocity_x, 1500*facing+velocity_x), set(velocity_y, velocity_y)]),
					mana.set(mana.get - consts.tank_loss),
					set(velocity_x, velocity_x - 25*facing)]),
				sound('chuff.ogg')],
			sound('')),
		spawn('water_bubble',midpoint_x+(50*facing),midpoint_y+20,1))",
	"on_ctrl_up": "[
	if(abs(velocity_x) < 100 and is_standing, map(filter(level.active_chars, 'char', collides(context.me, 'body', char, 'interact')), 'obj', [set(tmp.interacting_with, obj), fire_event(obj, 'interact')]))]",
	"on_die": "[spawn('die_cloud', midpoint_x, midpoint_y, facing)]",
	"on_end_attack_anim": "[
		 if(('fat' in variations), animation('swallow')),
	                               stand(self)]",
	"on_end_begin_glide_anim": "if(ctrl_jump,animation('glide'),animation('fall'))",
	"on_end_crouch_anim": "if(ctrl_down, animation('crouch'), animation('leave_crouch'))",
	"on_end_ctrl_up": "if((animation in ['enter_lookup', 'lookup']), stand(self))",
	"on_end_emote_confused_anim": "animation('stand')",
	"on_end_emote_geez_anim": "animation('stand')",
	"on_end_emote_impatient_anim": "animation('stand')",
	"on_end_emote_nod_anim": "animation('stand')",
	"on_end_emote_oh_anim": "animation('stand')",
	"on_end_emote_raisedfinger_anim": "animation('stand')",
	"on_end_emote_talk_anim": "animation('stand')",
	"on_end_energyshot_anim": "stand(self)",
	"on_end_enter_crouch_anim": "animation('crouch')",
	"on_end_enter_lookup_anim": "animation('lookup')",
	"on_end_glide_anim": "if(ctrl_jump,animation('glide'),animation('fall'))",
	"on_end_hurt_anim": "animation('stand')",
	"on_end_interact_anim": "animation('stand')",
	"on_end_jump_anim": "if(ctrl_jump,animation('begin_glide'),animation('fall'))",
	"on_end_leave_crouch_anim": "stand(self)",
	"on_end_lookup_anim": "animation('lookup')",
	"on_end_skid_anim": "stand(self)",
	"on_end_stand_anim": "stand(self)",
	"on_end_stand_down_slope_anim": "stand(self)",
	"on_end_stand_up_slope_anim": "stand(self)",
	"on_end_swallow_anim": "stand(self)",
	"on_end_swim_down_anim": "if(underwater,animation('swim_down'),stand(self))",
	"on_end_swim_side_anim": "if(underwater,animation('swim_side'),stand(self))",
	"on_end_swim_side_idle_anim": "float(self)",
	"on_end_swim_up_anim": "if(underwater,animation('swim_up'),stand(self))",
	"on_end_turn_anim": "stand(self)",
	"on_end_up_energyshot_anim": "stand(self)",
	"on_end_walk_anim": "animation('walk')",
	"on_end_walk_back_anim": "stand(self)",
	"on_enter_level": "[animation('stand')]",
	"on_enter_skid_anim": "if(abs(velocity_x) > 300, spawn('dust_cloud_skid', midpoint_x + 36*facing, y2 - 10, facing))",
	"on_enter_stand_anim": "if(abs(slope_standing_on) > 20, stand(self))",
	"on_enter_stand_down_slope_anim": "if(slope_standing_on*facing < 20, stand(self))",
	"on_enter_stand_up_slope_anim": "if(slope_standing_on*facing > -20, stand(self))",
	"on_enter_water": "[float(self),
		add_wave(midpoint_x, y2, -2000, 5*velocity_y, 30*velocity_y, 300, 300),
		add_wave(midpoint_x, y2, 2000, 5*velocity_y, 30*velocity_y, 300, 300),
		add_wave(midpoint_x, y2, -1000, 3*velocity_y, 20*velocity_y, 200, 200),
		add_wave(midpoint_x, y2, 1000, 3*velocity_y, 20*velocity_y, 200, 200),
		add_wave(midpoint_x, y2, -500, 2*velocity_y, 10*velocity_y, 100, 100),
		add_wave(midpoint_x, y2, 500, 2*velocity_y, 10*velocity_y, 100, 100)
	]",
	"on_exit_water": "[
		add_wave(midpoint_x, y2+100, 2000, -5*velocity_y, -30*velocity_y, 300, 300),
		add_wave(midpoint_x, y2+100, -2000, -5*velocity_y, -30*velocity_y, 300, 300),
		add_wave(midpoint_x, y2+100, 1000, -3*velocity_y, -20*velocity_y, 200, 200),
		add_wave(midpoint_x, y2+100, -1000, -3*velocity_y, -20*velocity_y, 200, 200),
		add_wave(midpoint_x, y2+100, 500, -2*velocity_y, -10*velocity_y, 100, 100),
		add_wave(midpoint_x, y2+100, -500, -2*velocity_y, -10*velocity_y, 100, 100),

	
	animation('fall'), if(velocity_y < 0, set(velocity_y, velocity_y*3))]",
	"on_handle_move_script": "if(abs(midpoint_x - tmp.scripted_target_x) < 10,
		  if(abs(tmp.scripted_target_facing) = 1 and facing != tmp.scripted_target_facing,
		  [set(control_lock, if(tmp.scripted_target_facing > 0, ['ctrl_right'], ['ctrl_left'])), schedule(1, fire_event('handle_move_script'))],

		  [set(control_lock, null),
		   set(me.tmp.scripted_target_x, null),
		   set(me.tmp.scripted_target_facing, null),
		   set(me.tmp.scripted_move_callback, null),
		   tmp.scripted_move_callback]),
	   
		[set(control_lock, if(tmp.scripted_target_x > midpoint_x, ['ctrl_right'], ['ctrl_left'])), schedule(1, fire_event('handle_move_script'))])",
	"on_hittable_PROTO_change_solid_dimensions_fail": "fire_event('solidity_fail')",
	"on_interacting": "if(tmp.interacting_with and tmp.fired_talk = 0, [set(tmp.fired_talk, 1), fire_event(tmp.interacting_with, 'talk')])",
	"on_leave_attack_anim": "set(attached_objects, [])",
	"on_leave_crouch_anim": "[set(tmp.lookdown_time, 0), set(vertical_look, 0)]",
	"on_leave_jump_attack_anim": "set(attached_objects, [])",
	"on_leave_lookup_anim": "[set(tmp.lookup_time, 0), set(vertical_look, 0)]",
	"on_leave_up_attack_anim": "set(attached_objects, [])",
	"on_outside_level": "[if(y > level.dimensions[3], add(hitpoints,-1))]",
	"on_playable_PROTO_collide_damage": "[if((not is_invincible), [add(hitpoints, -max(1, surface_damage)), cause_flinch(collide_with), display_hurt_visuals(), set(vars.time_last_hit, cycle), set(solid_dimensions_in, ['player'])])]",
	"on_playable_PROTO_process_fall": "if(is_standing, if(tmp.last_standing_cycle = cycle-1, animation('stand'), set(tmp.last_standing_cycle, cycle)))",
	"on_process": "[
	    if(not ctrl_attack, set(vars.tank_fuel, min(consts.tank_size, vars.tank_fuel + consts.tank_gain))),
		if(ctrl_attack and (cycle%4 = 0) and vars.tank_fuel > 0, [set(vars.tank_fuel, vars.tank_fuel - consts.tank_loss/2), spawn('nene_flameshot',midpoint_x + 30*facing,midpoint_y+if(animation = 'lookup', -15, 20),facing, [set(velocity_x, velocity_x), if(animation = 'lookup', set(velocity_y, -500))])]),
	    if((not is_standing) and animation_requires_standing(self), [animation('fall')]),
	    if(ctrl_up and (animation in ['stand','stand_up_slope','stand_down_slope']), animation('enter_lookup')),
	    if((animation in ['enter_lookup', 'lookup']) and (not ctrl_up), stand(self)),
			if(underwater,[
				swim(self, ctrl_right - ctrl_left, ctrl_down - ctrl_up),
			   if((not (ctrl_left or ctrl_right or ctrl_up or ctrl_down)) and (animation in ['swim_side','swim_up','swim_down']),
				   float(self)),
                   if(ctrl_left != ctrl_right, set(facing, ctrl_right - ctrl_left))],
			   [[if(ctrl_right, 
					if(ctrl_attack,
						if(facing=1,
							walk(self, 1, 'walk'), 
						    walk(self, 1, 'walk_back')),
						[set_facing(self, 1),
						 walk(self, 1, 'walk')]
					)
				),
			   ],
			   [if(ctrl_left, 
					if(ctrl_attack,
						if(facing=1,
							walk(self, -1, 'walk_back'), 
						    walk(self, -1, 'walk')),
						[set_facing(self, -1),
						 walk(self, -1, 'walk')]
					)
				),
			   ],
			   if(ctrl_down, crouch(self)),
				   if((not (ctrl_left or ctrl_right)) and (animation in ['walk', 'walk_back']),
					   stand(self))])]",
	"on_process_crouch": "[set(tmp.lookdown_time, tmp.lookdown_time+1), if(tmp.lookdown_time = 50, set(vertical_look, 200))]",
	"on_process_fall": "if(ctrl_jump, animation('begin_glide'), proto_event('playable_unstable', 'process_fall'))",
	"on_process_glide": "if(velocity_y > glide_limiter, set(velocity_y, glide_limiter))",
	"on_process_jump": "if(ctrl_jump, [add(velocity_y, -vars.jump_boost)])",
	"on_process_lookup": "[set(tmp.lookup_time, tmp.lookup_time+1), if(tmp.lookup_time = 50, set(vertical_look, -200))]",
	"on_solidity_fail": "if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me),
			   set(tmp.in_solidity_fail, 0)
			  ])",
	"on_start_interact": "[animation('interact'), set(tmp.fired_talk, 0)]",
	"on_stuck": "if(not underwater, if(not solid(level, midpoint_x, y+self.img_h-10), add(velocity_y, -vars.jump_power), add(velocity_x, if(facing=1, 300, -300))))",
	"on_surface_damage": "[fire_event('collide_damage')]",
	"on_timer": "[
#handle ending of invincibility#
	    if((cycle - vars.time_last_hit)/2 <= 50 and (cycle - vars.time_last_hit)/2 > 10, set(solid_dimensions_in, ['player', 'common', 'boss'])),
		if(not is_invincible_posthit,
		    [if(underwater and water_object.consts.damage,
				[add(hitpoints, -water_object.consts.damage), display_hurt_visuals(),
				if(water_object.type = 'acid_controller', [sound('acid.ogg'), spawn('acid_burn_particles',mid_x,mid_y,1,set(child.parent,me))]),
				 set(vars.time_last_hit, cycle)]),
			set(alpha,255)])]",
	"properties": {
		"attack_damage": 0,
		"attack_knockback": 0,
		"cause_flinch": "def(collide_with) execute(me, [
			add(me.velocity_x,me.hurt_velocity_x * sign(collide_with.midpoint_x - me.midpoint_x)), 
			add(me.velocity_y,me.hurt_velocity_y),
			cause_hurt_anim(collide_with)
			])",
		"cause_hurt_anim": "def(collide_with) execute(me, if('hurt' in available_animations,set(me.animation, 'hurt')))",
		"damage_cooldown": 0,
		"display_hurt_visuals": "def() execute(me, 
					[
					hurt_flash_sequence()
					])",
		"display_posthit_invincibility_flash_sequence": "def() if(consts.posthit_invicibility_period, 
			map(range(consts.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(alpha,50),set(alpha,255))  ) ) )",
		"flash_bright": "def() [set(me.brightness, 1023)]",
		"flash_off": "def() [set(me.brightness, 255),set(me.red, 255),set(me.green, 255), set(me.blue, 255)]",
		"flash_red": "def() [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]",
		"flinch_threshold": 3,
		"get_hit_by": "def(collide_with) execute(me, [
						handle_special_damage_response(collide_with),
	
						if((not is_invincible) and (collide_with.attack_damage > 0) and collide_with.hitpoints > 0 and (collide_with.attack_damage >= armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[display_hurt_visuals(),
								display_posthit_invincibility_flash_sequence(),
								handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])",
		"handle_damage": "def(collide_with) execute(me,[
						add(me.hitpoints, - if(me = level.player and collide_with.attack_damage_to_player, collide_with.attack_damage_to_player, collide_with.attack_damage)),
						player_damage_screen_flash(collide_with.attack_damage),
						set(solid_dimensions_in, ['player']),
						player_specific_damage_response()
					])",
		"handle_damage_type": "def(collide_with) null #virtual#",
		"handle_flinch": "def(collide_with) 
			execute(me, if(collide_with.attack_damage >= flinch_threshold, cause_flinch(collide_with)))",
		"handle_knockback": "def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))",
		"handle_special_damage_response": "def(collide_with) null #virtual#",
		"help": "q{
Debug Console Help:
This is the debug console. Commands, which are written in FFL, are run on the
selected object. For example, you just ran the help command on our hero. Some
other commands you could try might be 'set(velocity_y, -5000)', or 'add(hp,5)'.To change the target of your actions in the console, click on the desired
object. There is a lot more you can do with FFL, so have a look at the
documentation on our wiki, https://github.com/frogatto/frogatto/wiki/. If you
get stuck, www.frogatto.com has a friendly forum where you can seek advice.
Press ctrl-d to close the console.
}",
		"higher_difficulty": "level.player.difficulty > level.player.difficulty_casual",
		"hittable_handle_damage": "def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))",
		"hittable_hurt_velocity_x": -200,
		"hittable_hurt_velocity_y": -400,
		"hurt_flash_sequence": "def()	[	flash_bright(),
									schedule(3, flash_red()),
									schedule(6, flash_bright()),
									schedule(9, flash_red()),
									schedule(12, flash_bright()),
									schedule(15, flash_off())]",
		"hurt_velocity_x": 0,
		"hurt_velocity_y": -800,
		"is_invincible": "if(invincible or level.in_dialog or is_invincible_posthit, 1, 0)",
		"is_invincible_posthit": "if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)",
		"is_player_body_part": 1,
		"log_string": "def(event) [set(tmp.logged_events, new_events), debug(new_events)] where new_events = map_merge(tmp.logged_events, {(event):1})",
		"lower_difficulty": "level.player.difficulty < level.player.difficulty_challenging",
		"mana": {
			"get": "vars.mana",
			"set": "[set(vars.mana, newValue), if(newValue = 0, set(vars.mana_shock_cycle, cycle))] where newValue = median(value, 0, vars.max_mana)"
		},
		"mana_shock_active": "cycle - vars.mana_shock_cycle < mana_shock_duration",
		"mana_shock_duration": 150,
		"mana_shock_guard": "def(thingToDo) if(not mana_shock_active, thingToDo)",
		"playable_team": "'player'",
		"player_damage_screen_flash": "def(dmg_amt)
							if(dmg_amt > 2 or dmg_amt >= hitpoints, screen_flash([255, 0, 0,255], 4), if(dmg_amt = 2, screen_flash([255, 0, 0,200], 3), screen_flash([255, 0, 0,70], 2)))",
		"player_specific_damage_response": "def() null",
		"scripted_move_to_x": "def(target_x, target_facing, callback)
		                    [
		                    set(me.tmp.scripted_target_x, target_x),
							set(me.tmp.scripted_target_facing, target_facing),
							set(me.tmp.scripted_move_callback, callback),
							fire_event(me, 'handle_move_script')
							]",
		"standard_thrown_damage": 400,
		"store_event": "def(event_name, value) if(not (event_name in [null, '']),
	add(level.player.vars.stored_events, {(event_name) -> value}), [debug('error, wrote bad stored_event value')])",
		"store_event_add": "def(event_name, addend) if(not (event_name in [null, '']), set(level.player.stored_events, map_merge(level.player.vars.stored_events, {(event_name) -> addend})), [debug('error, wrote bad stored_event value')])",
		"team": "'player'"
	},
	"solid_area": [15,10,29,36],
	"solid_dimensions": ["player","common","boss"],
	"springiness": 100,
	"timer_frequency": 2,
	"tmp": {
		"last_standing_cycle": -1,
		"left": 0,
		"logged_events": {
		},
		"lookup_time": 0,
		"right": 0,
		"scripted_move_callback": null,
		"scripted_target_facing": null,
		"scripted_target_x": null,
		"time_last_hit": 0
	},
	"variations": null,
	"vars": {
		"achievement_kill_chain": [
			[null,-1000],
			[null,-2000],
			[null,-3000],
			[null,-4000],
			[null,-4000],
			[null,-5000],
			[null,-6000],
			[null,-7000],
			[null,-8000],
			[null,-9000],
			[null,-10000],
			[null,-11000],
			[null,-12000],
			[null,-13000],
			[null,-14000],
			[null,-15000]
		],
		"glide_limiter": 100,
		"jump_boost": 70,
		"jump_glide": 40,
		"jump_power": 1000,
		"levels_visited": [],
		"mana": 5000,
		"mana_shock_cycle": -150,
		"max_mana": 5000,
		"name": "Nene",
		"stored_events": {
		},
		"swim_accel": 140,
		"tank_fuel": 1000,
		"unlocked_items": ["heart_object","points_cube","points_cube"]
	},
	"vehicle": false
}