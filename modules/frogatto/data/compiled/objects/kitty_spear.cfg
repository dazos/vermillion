{
	"animation": [
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 8,
			"frame_info": [7,5,0,3,0,575,34,28,7,6,0,3,34,575,34,27,7,7,0,3,68,575,34,26,7,5,0,3,102,575,34,28,7,6,0,3,136,575,34,27,7,7,0,3,170,575,34,26,7,6,0,3,204,575,34,27],
			"frames": 7,
			"id": "stand",
			"image": "compiled-2.png",
			"rect": [-7,570,33,605],
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 12,
			"frame_info": [8,6,10,3,890,631,23,27],
			"frames": 1,
			"id": "turn",
			"image": "compiled-2.png",
			"rect": [882,625,922,660],
			"rotate_on_slope": true
		},
		{
			"accel_x": 300,
			"accel_y": 80,
			"body_area": "all",
			"duration": 6,
			"events": "0:12:footfall",
			"frame_info": [7,5,0,3,798,546,34,28,7,6,0,3,832,546,34,27,7,5,1,3,866,546,33,28,7,6,0,3,899,546,34,27],
			"frames": 4,
			"id": "walk",
			"image": "compiled-2.png",
			"rect": [791,541,831,576],
			"rotate_on_slope": true
		},
		{
			"accel_x": 1000,
			"accel_y": 80,
			"body_area": "all",
			"duration": 6,
			"events": "0:6:12:18:footfall",
			"frame_info": [5,6,1,3,0,659,35,27,5,8,1,3,35,659,35,25,5,6,1,3,70,659,35,27,5,8,1,3,105,659,35,25],
			"frames": 4,
			"id": "dash",
			"image": "compiled-2.png",
			"rect": [-5,653,35,688],
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 2,
			"frame_info": [4,8,7,3,93,792,35,25,4,8,7,3,128,792,35,25],
			"frames": 2,
			"id": "readyspearthrust",
			"image": "compiled-2.png",
			"rect": [89,784,134,819],
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"attack_area": [30,23,38,32],
			"body_area": "all",
			"duration": 6,
			"frame_info": [1,6,1,3,238,575,44,27,3,6,1,3,282,575,42,27,5,6,1,3,324,575,40,27,5,5,3,3,364,575,38,28,5,5,5,3,402,575,36,28],
			"frames": 5,
			"id": "spearthrust",
			"image": "compiled-2.png",
			"rect": [237,569,282,604],
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 4,
			"frame_info": [7,12,0,3,191,334,34,21,6,16,0,3,225,334,35,17,7,6,0,3,260,334,34,27,8,4,1,3,294,334,32,29,9,1,2,3,326,334,30,32],
			"frames": 5,
			"id": "spring",
			"image": "compiled-2.png",
			"rect": [184,322,224,357],
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 12,
			"frame_info": [5,3,1,5,933,546,35,28],
			"frames": 1,
			"id": "hurt",
			"image": "compiled-2.png",
			"rect": [928,543,968,578],
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 4,
			"frame_info": [5,8,1,3,193,792,35,25,5,8,1,3,228,792,35,25],
			"frames": 2,
			"id": "posthurt",
			"image": "compiled-2.png",
			"rect": [188,784,228,819],
			"rotate_on_slope": true
		},
		{
			"accel_x": 0,
			"accel_y": 80,
			"body_area": "all",
			"duration": 6,
			"frame_info": [7,9,0,0,0,299,34,27,6,5,0,3,34,299,35,28,6,2,0,1,69,299,35,33,7,1,0,0,104,299,34,35,7,1,0,0,138,299,34,35,7,1,0,0,172,299,34,35],
			"frames": 6,
			"id": "alert",
			"image": "compiled-2.png",
			"rect": [-7,290,33,325],
			"rotate_on_slope": true
		}
	],
	"consts": {
		"basic_type": "kitty_spear",
		"bounce_roundness": 80,
		"frogourmet_tag": "kitty_spear",
		"spring_amount": 1400,
		"springiness": 200
	},
	"editor_info": {
		"category": "enemies, milgramen"
	},
	"feet_width": 4,
	"friction": 1000,
	"hitpoints": 200,
	"id": "kitty_spear",
	"mass": 5,
	"on_add_object_fail": "[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]",
	"on_bounced_on": "[add(hitpoints, -100), hurt_flash_sequence(), if(jumped_on_by.mass >= 1000, die(), [animation('spring'),sound('kitty-squish.wav')])]",
	"on_change_animation_failure": "fire_event('solidity_fail')",
	"on_change_solid_dimensions_fail": "fire_event('solidity_fail')",
	"on_collide_object_body": "if(collide_with.team != team and collide_with.team != 'evil_harmless' and (not (collide_with.team = 'evil' and team = 'evil_harmless')), if(collide_with_area in ['attack','thrown'], get_hit_by(collide_with)))",
	"on_collide_side": "if(animation in ['readyspearthrust', 'spearthrust'], [set(velocity_x, 0)], proto_event('kitty', 'collide_side'))",
	"on_create": "[proto_event('kitty','create'), if(higher_difficulty,set(activation_border,800))]",
	"on_die": "[score(level,points_value), spawn_item(self), death_burst_tracked(self)]",
	"on_end_alert_anim": "prepare_to_dash()",
	"on_end_dash_anim": "if(in_stabbing_range or facing != desired_facing, prepare_to_strike(), animation('dash'))",
	"on_end_hurt_anim": "if(is_standing,[set(vars.posthurt_counter, 3),animation('posthurt')],animation('hurt'))",
	"on_end_posthurt_anim": "if(vars.posthurt_counter > 0,[set(vars.posthurt_counter, vars.posthurt_counter - 1),animation('posthurt')],animation('stand'))",
	"on_end_readyspearthrust_anim": "if(vars.attack_counter < attack_countdown_length, [add(vars.attack_counter, 1),animation('readyspearthrust')], [animation('spearthrust'), sound('weapon-swing-light'+1d4+'.wav'), set(velocity_x, 400*facing)])",
	"on_end_spearthrust_anim": "if(facing != desired_facing,
	                          [animation('turn'), set(facing, desired_facing)],
	                           if(in_stabbing_range and higher_difficulty, prepare_to_strike(), animation('stand')))",
	"on_end_spring_anim": "animation('walk')",
	"on_end_stand_anim": "choose_action()",
	"on_end_turn_anim": "if(in_stabbing_range and
	                     player_in_decent_y_pos,
	                     prepare_to_strike(), if(higher_difficulty, choose_action(), animation('stand') ) )",
	"on_end_walk_anim": "choose_action()",
	"on_enter_water": "die()",
	"on_footfall": "[sound('kitty-footstep'+1d10+'.wav', volume)] where volume = constrain(0, 300.0/distance(self, level.player),1.0)",
	"on_hittable_PROTO_change_animation_failure": "fire_event('solidity_fail')",
	"on_hittable_PROTO_change_solid_dimensions_fail": "fire_event('solidity_fail')",
	"on_hittable_PROTO_solidity_fail": "if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me),
			   set(tmp.in_solidity_fail, 0)
			  ])",
	"on_kitty_PROTO_collide_side": "if(collide_with != level.player, [set(velocity_x,-velocity_x/2),set(facing, -facing),animation('turn')])",
	"on_kitty_PROTO_create": "animation('stand')",
	"on_kitty_PROTO_end_hurt_anim": "animation('stand')",
	"on_kitty_PROTO_end_stand_anim": "if(is_standing and not_daydreaming, if(turns_towards_player,face_player(), choose_action()), animation('stand'))
						where not_daydreaming = if(level.player.difficulty > level.player.difficulty_casual, 1d10 > 1, 1d2 = 2)",
	"on_kitty_PROTO_end_turn_anim": "animation('walk')",
	"on_kitty_PROTO_end_walk_anim": "choose_action()",
	"on_outside_level": "[if(y > level.dimensions[3], add(hitpoints,-1))]",
	"on_process": "set(rotate, slope_standing_on)",
	"on_process_dash": "[if(in_stabbing_range, prepare_to_strike()), set(accel_x,if(higher_difficulty, 1500, 1000) )]",
	"on_solidity_fail": "if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me,0,-1),
			   set(tmp.in_solidity_fail, 0)
			  ])",
	"on_surface_damage": "die()",
	"on_timer": "if(turns_at_cliffs and is_standing and animation = 'walk' and distance_to_cliff < 30,[set(facing, -facing),animation('turn')],null)",
	"properties": {
		"alert": "def() if(higher_difficulty and should_skip_alert, prepare_to_dash(), [animation('alert'),set(vars.last_alert,level.cycle)]) where should_skip_alert = (abs(level.cycle - vars.last_alert) < 300)",
		"attack_countdown_length": "if(higher_difficulty, 0, 3)",
		"attack_damage": "if(level.player.difficulty <= level.player.difficulty_casual,1,2)",
		"attack_knockback": 0,
		"cause_flinch": "def(collide_with) execute(me, [
			add(me.velocity_x,me.hurt_velocity_x * sign(collide_with.midpoint_x - me.midpoint_x)), 
			add(me.velocity_y,me.hurt_velocity_y),
			cause_hurt_anim(collide_with)
			])",
		"cause_hurt_anim": "def(collide_with) execute(me, if('hurt' in available_animations,set(me.animation, 'hurt')))",
		"choose_action": "def() if(player_noticeable, alert(), animation('walk'))",
		"damage_cooldown": 0,
		"desired_facing": "if(level.player.midpoint_x < self.midpoint_x, -1, 1)",
		"display_hurt_visuals": "def() execute(me, 
					[
					hurt_flash_sequence()
					])",
		"display_posthit_invincibility_flash_sequence": "def() if(consts.posthit_invicibility_period, 
			map(range(consts.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(alpha,50),set(alpha,255))  ) ) )",
		"face_player": "def() if(desired_facing != facing, [animation('turn'),set(facing, desired_facing)], choose_action())",
		"flash_bright": "def() [set(me.brightness, 1023)]",
		"flash_off": "def() [set(me.brightness, 255),set(me.red, 255),set(me.green, 255), set(me.blue, 255)]",
		"flash_red": "def() [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]",
		"flinch_threshold": 40,
		"front_detection_area": "if(higher_difficulty, 1200, 400)",
		"get_hit_by": "def(collide_with) execute(me, [
						handle_special_damage_response(collide_with),
	
						if((not is_invincible) and (collide_with.attack_damage > 0) and collide_with.hitpoints > 0 and (collide_with.attack_damage >= armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[display_hurt_visuals(),
								display_posthit_invincibility_flash_sequence(),
								handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])",
		"handle_damage": "def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))",
		"handle_damage_type": "def(collide_with) null #virtual#",
		"handle_flinch": "def(collide_with) 
			execute(me, if(collide_with.attack_damage >= flinch_threshold, cause_flinch(collide_with)))",
		"handle_knockback": "def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))",
		"handle_special_damage_response": "def(collide_with) null #virtual#",
		"higher_difficulty": "level.player.difficulty > level.player.difficulty_casual",
		"hittable_attack_damage": 0,
		"hittable_flinch_threshold": 3,
		"hurt_flash_sequence": "def()	[	flash_bright(),
									schedule(3, flash_red()),
									schedule(6, flash_bright()),
									schedule(9, flash_red()),
									schedule(12, flash_bright()),
									schedule(15, flash_off())]",
		"hurt_velocity_x": -200,
		"hurt_velocity_y": -400,
		"in_stabbing_range": "(abs(level.player.midpoint_x - self.midpoint_x) < 90)",
		"is_invincible": "if(invincible or level.in_dialog or is_invincible_posthit, 1, 0)",
		"is_invincible_posthit": "if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)",
		"kitty_attack_damage": 2,
		"kitty_choose_action": "def() animation('walk')",
		"kitty_higher_difficulty": "level.player.difficulty > level.player.difficulty_casual",
		"lower_difficulty": "level.player.difficulty < level.player.difficulty_challenging",
		"player_in_decent_y_pos": "(level.player.midpoint_y > self.y and level.player.midpoint_y < self.y2)",
		"player_in_target_area": "if(player_noticeable and self.facing = desired_facing, 1, 0)",
		"player_noticeable": "if(player_in_decent_y_pos and abs(level.player.midpoint_x - self.midpoint_x) < if(self.facing = desired_facing, front_detection_area, rear_detection_area), 1, 0)",
		"prepare_to_dash": "def() if(facing != desired_facing, [animation('turn'), set(facing, desired_facing)], animation('dash'))",
		"prepare_to_strike": "def() [animation('readyspearthrust'),set(vars.attack_counter,0)]",
		"rear_detection_area": "if(higher_difficulty, 1200, 200)",
		"standard_thrown_damage": 400,
		"team": "'evil'"
	},
	"solid_area": [6,10,26,33],
	"solid_dimensions": ["enemy","common"],
	"timer_frequency": 5,
	"tmp": null,
	"traction": 1000,
	"variations": null,
	"vars": {
		"attack_counter": 0,
		"last_alert": -300,
		"points_value": 271,
		"posthurt_counter": 0,
		"turns_at_cliffs": 1,
		"turns_towards_player": 0
	}
}