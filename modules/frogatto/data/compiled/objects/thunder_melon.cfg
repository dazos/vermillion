{
	"animation": [
		{
			"accel_y": 0,
			"body_area": "all",
			"duration": 1000,
			"frame_info": [0,0,0,0,584,36,16,16],
			"frames": 1,
			"id": "normal",
			"image": "compiled-3.png",
			"rect": [584,36,599,51]
		},
		{
			"accel_y": 80,
			"body_area": null,
			"duration": 1000,
			"frames": 1,
			"id": "thrown",
			"image": "props/thunder-melon.png",
			"pad": 3,
			"rect": [0,0,15,15],
			"thrown_area": "all"
		},
		{
			"accel_y": 0,
			"body_area": "all",
			"duration": 18,
			"frame_info": [0,0,0,0,1023,78,0,0],
			"frames": 1,
			"id": "hurt",
			"image": "compiled-0.png",
			"rect": [1023,78,1022,77]
		}
	],
	"consts": {
		"basic_type": "thunder_melon",
		"springiness": 0
	},
	"editor_info": {
		"category": "ammo"
	},
	"feet_width": 4,
	"friction": 1000,
	"hitpoints": 1,
	"id": "thunder_melon",
	"mass": 5,
	"object_level_collisions": true,
	"on_add_object_fail": "[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]",
	"on_bounced_on": "die()",
	"on_change_animation_failure": "fire_event('solidity_fail')",
	"on_change_solid_dimensions_fail": "fire_event('solidity_fail')",
	"on_collide_level": "die()",
	"on_collide_object_body": "if(collide_with_area in ['body', 'thrown'], die())",
	"on_collide_object_thrown": "[if(collide_with_area = 'body' and collide_with.team != team and vars.damage > 0,
	 [if(collide_with.get_hit_by, [collide_with.get_hit_by(me)]), die()])]",
	"on_die": "[spawn('explosion_big_harmful',midpoint_x,midpoint_y,facing),sound('BombExplode.wav')]",
	"on_end_hurt_anim": "animation('normal')",
	"on_end_normal_anim": "animation('normal')",
	"on_enter_anim": "set(tmp, 'already_hit', [])",
	"on_outside_level": "[if(y > level.dimensions[3], add(hitpoints,-1))]",
	"on_solidity_fail": "if(tmp.in_solidity_fail, die(),
	          [set(tmp.in_solidity_fail, 1),
			   resolve_solid(me),
			   set(tmp.in_solidity_fail, 0)
			  ])",
	"on_spat": "set(vars.has_been_spat, 1)",
	"on_stationary_vulnerable_PROTO_bounced_on": "[if(jumped_on_by.mass >= 1000, die(), animation('spring'))]",
	"on_stationary_vulnerable_PROTO_collide_object_body": "if(collide_with.team != team and collide_with.team != 'evil_harmless' and (not (collide_with.team = 'evil' and team = 'evil_harmless')), if(collide_with_area in ['attack','thrown'], get_hit_by(collide_with)))",
	"on_stationary_vulnerable_PROTO_die": "[score(level,points_value), spawn_item(self), death_burst_tracked(self)]",
	"on_surface_damage": "die()",
	"properties": {
		"attack_damage": 0,
		"attack_knockback": 0,
		"cause_flinch": "def(collide_with) execute(me, [
			add(me.velocity_x,me.hurt_velocity_x * sign(collide_with.midpoint_x - me.midpoint_x)), 
			add(me.velocity_y,me.hurt_velocity_y),
			cause_hurt_anim(collide_with)
			])",
		"cause_hurt_anim": "def(collide_with) execute(me, if('hurt' in available_animations,set(me.animation, 'hurt')))",
		"damage_cooldown": 0,
		"display_hurt_visuals": "def() execute(me, 
					[
					hurt_flash_sequence()
					])",
		"display_posthit_invincibility_flash_sequence": "def() if(consts.posthit_invicibility_period, 
			map(range(consts.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(alpha,50),set(alpha,255))  ) ) )",
		"flash_bright": "def() [set(me.brightness, 1023)]",
		"flash_off": "def() [set(me.brightness, 255),set(me.red, 255),set(me.green, 255), set(me.blue, 255)]",
		"flash_red": "def() [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]",
		"flinch_threshold": 3,
		"get_hit_by": "def(collide_with) execute(me, [
						handle_special_damage_response(collide_with),
	
						if((not is_invincible) and (collide_with.attack_damage > 0) and collide_with.hitpoints > 0 and (collide_with.attack_damage >= armor) and (collide_with.damage_cooldown < (cycle - vars.time_last_hit)),
								[display_hurt_visuals(),
								display_posthit_invincibility_flash_sequence(),
								handle_flinch(collide_with),
								handle_damage(collide_with),
								set(vars.time_last_hit, me.cycle)]),
						
						handle_damage_type(collide_with),
						handle_knockback(collide_with)])",
		"handle_damage": "def(collide_with) execute(me,add(me.hitpoints, - collide_with.attack_damage))",
		"handle_damage_type": "def(collide_with) null #virtual#",
		"handle_flinch": "def(collide_with) 
			execute(me, if(collide_with.attack_damage >= flinch_threshold, cause_flinch(collide_with)))",
		"handle_knockback": "def(collide_with) execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))",
		"handle_special_damage_response": "def(collide_with) null #virtual#",
		"higher_difficulty": "level.player.difficulty > level.player.difficulty_casual",
		"hittable_hurt_velocity_x": -200,
		"hittable_hurt_velocity_y": -400,
		"hurt_flash_sequence": "def()	[	flash_bright(),
									schedule(3, flash_red()),
									schedule(6, flash_bright()),
									schedule(9, flash_red()),
									schedule(12, flash_bright()),
									schedule(15, flash_off())]",
		"hurt_velocity_x": 0,
		"hurt_velocity_y": 0,
		"is_invincible": "if(invincible or level.in_dialog or is_invincible_posthit, 1, 0)",
		"is_invincible_posthit": "if(vars.time_last_hit and (abs(vars.time_last_hit - me.cycle) < consts.posthit_invicibility_period), 1, 0)",
		"lower_difficulty": "level.player.difficulty < level.player.difficulty_challenging",
		"standard_thrown_damage": 400,
		"stationary_vulnerable_team": "'evil'",
		"team": "if(has_been_spat,'player','neutral')"
	},
	"springiness": 100,
	"tags": "swallowable",
	"timer_frequency": 2,
	"tmp": null,
	"traction": 1000,
	"traction_in_air": 1000,
	"variations": null,
	"vars": {
		"damage": 1,
		"has_been_spat": 0,
		"points_value": 1
	},
	"zorder": 0
}